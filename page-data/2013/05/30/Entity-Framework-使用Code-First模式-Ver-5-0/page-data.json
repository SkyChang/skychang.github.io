{"componentChunkName":"component---src-templates-page-js","path":"/2013/05/30/Entity-Framework-使用Code-First模式-Ver-5-0/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Entity Framework - 使用Code First模式 Ver 5.0","date":"30 May 2013","author":"Sky Chang","excerpt":null,"tags":["ASP.NET MVC","Entity Framework","SQL Server"],"coverImage":null},"id":"4ec54a3e-c1d0-53c7-bb60-816f0292c801","html":"<p><font color=\"#ff0000\"><font color=\"#5e5e5e\">還記得大概一年多前，EF 4.1的時候，小弟我有非常簡單的介紹過Code First，然後就沒消沒息了XDD，其實後續還是有一兩個case有稍微用過這個東西，但是當時用，也不算是真正的Code First，而是偽Code First ( 因為還是先建立DB Table，再利用工具去產生Class… )，而中間，也不斷被真正愛用Code First的人，給問倒問題XDD。</font></font></p>\n<p>當然，無論是官方的推崇，與國外的論壇，小弟也知道Code First的好處，但沒全力投入，還是無法深深的感覺到；其次，通常都是一人專案，要如何帶到整個Team協同，也是一個問題…特別是DBA反彈的聲音最大…( 還好現在Team裡面的dba很好講話XDD 是個好人~~ )；而最近，剛好有機會，就<strike>強迫</strike>教育了Team member，正式把Code First帶到Team裡面，而Team member裡面使用過的人，都說讚!!( 好險- -||| )</p>\n<p>經過一年，EF也已經5.0版本，甚至已經在跑6.0的阿發版本了，官方的各大專案，也使用Code First當作基礎，所以，小弟一年過後，又回來重寫一下之前的文章啦XDDD</p>\n<h4>What’s Code First</h4>\n<p>不知道大家是怎樣開始專案的呢?我相信，最常聽到的應該是，看使用者的需求，然後來規劃資料庫，畫出ER圖，然後就開始努力地下去Coding了( 這裡就不討論怎樣軟體開發流程是好是壞了。 )。</p>\n<p>接下來呢!?早期小弟在寫ASP的時候，會在裡面加上一堆SQL、邏輯、畫面，組合成義大利麵式的程式碼!( 可惜實際上不夠美味 )，後來使用ASP.NET的時候，也差不了多少，一樣在.cs的檔案裏面放上一堆SQL，只是那時候用Dataset，感覺上比較高級了，後來懂得把Table變成一個又一個的物件，至少有拆開了=w=，到現在，會使用Repository Patten來拆開資料存取層，也會利用EntityFramework來進行ORM，至少有進步了XDD。</p>\n<p>但是無論怎樣的設計上，還是會先考慮資料庫模型，想好Table的關聯，畫好ER圖，建好DB後，在開始寫程式。</p>\n<p>而這樣的作法，也不是說好或不好，畢竟，沒有不好的方法，只有用錯的地方=w=，但今天，EntityFramework帶來另外一種作法，也就是Code First。( 如果先建立DB，就稱為DB First，如果利用EF工具，先建立好模型，就稱為Model First。)</p>\n<p>廢話了一堆，Code First，簡單的說，就是不先建立db，也不用EF的工具建立模型，而是直接利用建立好的類別產生DB!</p>\n<p>有沒有很酷!，老實說我覺得酷斃了，尤其是像小弟那麼懶的人，每次想到還要建立Table，真的就懶了…還是寫Class比較親切!?…</p>\n<h4>建立Code First Demo</h4>\n<p>首先，我們這個case就用MVC來Demo吧 ( 但不會講到MVC喔 )，建立完MVC後，可以去NuGet檢查一下，是否有Entity Framework套件。</p>\n<p><a href=\"http://lh6.ggpht.com/-0S77e9hp9qs/UaYsxxmc8II/AAAAAAAAGNk/1AqBBzSR5hk/s1600-h/image%25255B4%25255D.png\"><img src=\"http://lh3.ggpht.com/-qwXDQ5DKzU8/UaYszFos35I/AAAAAAAAGNs/sbFnFqmnKgc/image_thumb%25255B2%25255D.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>然後，假設我們要寫一個客戶的管理系統，那自然，就要先建立一個客戶的Class，我們新增一個Class，取名為ClientBasic。</p>\n<p>接下來呢!?當然就是開始打ClientBasic的程式碼啦!，那db呢!?，別忘了我們現在是Code First，顧名思義，就是先打Code!!</p>\n<p>我們建立一個ID，代表唯一的編號，和一個Name，就這麼簡單。</p>\n<pre class=\"brush: csharp;\">using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.ComponentModel.DataAnnotations;\nusing System.Linq;\nusing System.Web;\n\nnamespace TestMVC.Models\n{\n    public class Customer\n    {\n        public int ID { get; set; }\n        public string Name { get; set; }\n\n    }\n}\n</pre>\n<p>然後，我們要建立另外一個程式碼，這個程式碼主要繼承於DbContext，簡單的說，就像是個資料庫一樣的感覺，而另外要注意的是，我們也要有個建構子，並且傳入字串\"name=TestContext\"，這個字串的意思，是代表，我們App.config( 如果是網頁，則是Web.config )，裡面會有TestContext的連線字串；接下來，我們會設定一個屬性為ClientBasics( 這裡通常會用複數 )，而這個屬性是DbSet型別，而這個屬性，感覺就像是Table一樣。</p>\n<pre class=\"brush: csharp;\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Data.Entity;\n\nnamespace MigrationsCodeDemo\n{\n    public class IMSContext : DbContext\n    {\n        public TestContext()\n            : base(\"name=TestContext\")\n        {\n\n        }\n        public DbSet&lt;clientbasic&gt; ClientBasics { get; set; }\n    }\n}\n</pre>\n<p>接下來，我們看一下App.config( 或是Web.config )，我們需要一個名稱為TestContext的連線字串，這邊我們使用LocalDB，如果想要連線到SQL Server 2012，就直接給SQL Server 2012的連線字串。</p>\n<pre class=\"brush: xml;\">  &lt;connectionStrings&gt;\n     &lt;add name=\"TestContext\" providerName=\"System.Data.SqlClient\" \n         connectionString=\"Data Source=(LocalDb)\\v11.0;Initial Catalog=TestContext;\n         Integrated Security=SSPI;\n         AttachDBFilename=|DataDirectory|\\TestContext.mdf\" /&gt;\n  &lt;/connectionStrings&gt;\n</pre>\n<p>接下來，我們去修改一下HomeController，在Index的這個Action下，把剛剛打好的TestContext物件給new起來( 變數稱為db )，而這裡面會有許多方法，用來處理所有和資料庫有關的行為，這邊我們new了一個新的Customer物件，並且加入到TestContext裡面( 可以想像成，加上一筆資料)，而裡面有屬性Name( 可以想像成欄位Name )，值為Sky，最後利用SaveChanges方法，就會將資料寫回到資料庫。</p>\n<pre class=\"brush: csharp;\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\nusing System.Web.Mvc;\nusing TestMVC.Models;\n\nnamespace TestMVC.Controllers\n{\n    public class HomeController : Controller\n    {\n\n        // GET: /Home/\n        public ActionResult Index()\n        {\n            var db = new TestContext();\n            //新增一筆資料\n            var cust = new Customer();\n            cust.Name = \"Sky\";\n            db.Customers.Add(cust);\n            db.SaveChanges();\n            return View();\n        }\n    }\n}\n</pre>\n<p>然後，我們把執行看看。( 當然，View要自己建立阿~@@~ )</p>\n<p>當我們去看資料庫，就會發現，他自動地幫我們建立了資料庫和Table!!，神奇吧!!就如前面所說的，我們可以完全不用考慮db該如何建，而會專心思考物件要怎麼寫!!</p>\n<p>另外，這邊要特別補充，並不是把TestContext給new出來，db就會自動建立，而是會在真正新增刪除修改查詢db的時候，才會觸發建立db的動作…此外，也別忘記，Linq有延遲載入的功能，所以上面範例，才會使用add當作範例。</p>\n<p><a href=\"http://lh5.ggpht.com/-uYjp0XnHS-s/UaYsz2VvglI/AAAAAAAAGN0/9e-8ZYqIcmY/s1600-h/image%25255B16%25255D.png\"><img src=\"http://lh5.ggpht.com/-TWMKoUhNG3c/UaYs0-rrhOI/AAAAAAAAGN8/_p__MAgUdsY/image_thumb%25255B8%25255D.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>如果去查資料，可以查到一筆</p>\n<p><a href=\"http://lh6.ggpht.com/-epNi2rtYHXU/UaYs1bKW0BI/AAAAAAAAGOE/6vy2X6SrljE/s1600-h/image%25255B17%25255D.png\"><img src=\"http://lh3.ggpht.com/-aHJy7n2gJP4/UaYs2cwHTrI/AAAAAAAAGOM/wzp4DQevs_M/image_thumb%25255B9%25255D.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<h4>後記</h4>\n<p>小弟這個範例，就是很簡單的先去建立類別，然後資料庫就自動幫忙建立起來了，但是聰明的你應該已經注意到了，那如果Class的屬性增加後，資料庫會不會自動變更!?答案已經很清楚了，在EF他會丟出例外給你看XDD，早期遇到問題，必須先刪除掉資料庫，才能重新Run一次，但現在，EF已經提出新的機制了( 其實一年前就提出了 ) 有興趣的可以<a href=\"http://blog.sanc.idv.tw/2012/04/entity-framework-code-firstenabling.html\">參考這篇</a>來解決此問題。</p>\n<h4>參考資料</h4>\n<li>[http://msdn.microsoft.com/zh-tw/data/ee712907](http://msdn.microsoft.com/zh-tw/data/ee712907 \"http://msdn.microsoft.com/zh-tw/data/ee712907\")</li>","excerpt":"還記得大概一年多前，EF 4.1的時候，小弟我有非常簡單的介紹過Code First，然後就沒消沒息了XDD，其實後續還是有一兩個case有稍微用過這個東西，但是當時用，也不算是真正的Code First，而是偽Code First ( 因為還是先建立DB Table…"}},"pageContext":{"type":"posts","next":{"frontmatter":{"path":null,"title":"Visual Studio - 使用不同身分開啟VS2012","tags":["Visual Studio"]},"fields":{"slug":"/2013/05/29/Visual-Studio-使用不同身分開啟VS2012/"},"fileAbsolutePath":"/home/runner/work/blog.sanc.idv.tw/blog.sanc.idv.tw/src/posts/blog.sanc.idv.tw/Visual-Studio-使用不同身分開啟VS2012.md"},"previous":{"frontmatter":{"path":null,"title":"SQL Server -  神奇又好用的File Table","tags":["SQL Server"]},"fields":{"slug":"/2013/06/17/SQL-Server-神奇又好用的File-Table/"},"fileAbsolutePath":"/home/runner/work/blog.sanc.idv.tw/blog.sanc.idv.tw/src/posts/blog.sanc.idv.tw/SQL-Server-神奇又好用的File-Table.md"}}}}