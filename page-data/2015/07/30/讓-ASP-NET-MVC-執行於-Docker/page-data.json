{"componentChunkName":"component---src-templates-page-js","path":"/2015/07/30/讓-ASP-NET-MVC-執行於-Docker/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"讓 ASP.NET MVC 執行於 Docker","date":"30 July 2015","author":"Sky Chang","excerpt":null,"tags":["ASP.NET MVC","Azure","Docker","Linux","Ubuntu","VM"],"coverImage":null},"id":"8f93d051-cad1-51d9-b9ec-efb72da67371","html":"<p>上一篇，我們看到了，如何安裝 Docker，並且 Run Ubuntu，和進入來管理，而這篇，我們就來使用一下 Microsoft 提供的 ASP.NET 5 Preview Docker Image，順便學一下，如何讓外面的 Port 對應到容器內部的 Port。 </p>\n<p>這篇基本上是參考<a href=\"http://blog.aminjam.com/hello-asp-net-5-on-docker/\">這篇</a>並進行調整。</p>\n<p>備註：這篇的做法是在容器裡面把 Source Code 丟進去處理，下一篇會在介紹更好的方法。</p>\n<h2>取得 ASP.NET 5 Docker Image 和執行</h2>\n<p>首先，我們要先取得 ASP.NET 5 Docker Image，我們可以透過以下指令來取得。</p>\n<p>sudo docker pull microsoft/aspnet </p>\n<p><img src=\"https://lh3.googleusercontent.com/-9efaFXpe44w/Vbo7RPxu08I/AAAAAAAAKkw/L5mypNyWStM/s600/06.png\" alt=\"enter image description here\" title=\"06.png\"></p>\n<p>完成之後，我們一樣，就可以透過 run 來執行此 Image，但這邊要特別注意一下，這邊多了一個 -p，這個的意思是代表對應的意思，表示要把外面的 80 Port 對應到容器內部的 5004，因為在容器裡面，所有連線都無法連入的，所以必須要自定義 Port。</p>\n<p>sudo docker run -p 80:5004 -t -i microsoft/aspnet</p>\n<p><img src=\"https://lh3.googleusercontent.com/-IF9KGLoBRlU/Vbo7WkSH8iI/AAAAAAAAKk8/3n23Jeoa3m0/s600/07.png\" alt=\"enter image description here\" title=\"07.png\"></p>\n<p>下完指令後，我們可以開另外一個終端機，透過以下指令來查看，對應的狀況。</p>\n<p>sudo iptables -t nat -nL</p>\n<p>看完之後，回到容器內，官方的 Image 基本上是不會有任何 MVC 的 Code 的，他提供的是一個很簡單的 Linux 還境，而裡面包含了 mono 和 K系列的指令 ( 未來會換成D系列 )，所以我們要直接在容器內下載官方範例，而下載要用到wget，因為容器原本沒有此套件，所以我們就用一下 apt-get 來安裝一下吧。</p>\n<h2>於容器內下載 Source 並執行</h2>\n<p>apt-get install wget</p>\n<p><img src=\"https://lh3.googleusercontent.com/-0zcDF50cJ4c/Vbo7b2aAZII/AAAAAAAAKlM/6iLnwIRfs6Q/s600/08.png\" alt=\"enter image description here\" title=\"08.png\"></p>\n<p>安裝完成之後，我們就可以透過 wget 來取得 source。</p>\n<p>cd ~ &#x26;&#x26; wget <a href=\"https://github.com/aspnet/Home/archive/master.zip\">https://github.com/aspnet/Home/archive/master.zip</a> &#x26;&#x26; unzip master.zip &#x26;&#x26; rm master.zip</p>\n<p><img src=\"https://lh3.googleusercontent.com/-Stmm-Qbef3o/Vbo7g0JNI4I/AAAAAAAAKlg/tyrqAof__xk/s600/09.png\" alt=\"enter image description here\" title=\"09.png\"></p>\n<p>完成之後，我們就只需要執行以下指令，來讓 MVC 專案取得必要的 Lib ，並且啟動。</p>\n<p>cd ~/Home-master/samples/HelloMvc &#x26;&#x26; kpm restore &#x26;&#x26; k kestrel</p>\n<p><img src=\"https://lh3.googleusercontent.com/-zut4ds6iVCo/Vbo7nuZ19PI/AAAAAAAAKlw/hfzaYtgy2mM/s600/10.png\" alt=\"enter image description here\" title=\"10.png\"></p>\n<p>到這邊基本上就ok了，但是，大家別忘記了，我們在Azure的環境啊！！所以Azure的端點也別忘記開啟…</p>\n<p><img src=\"https://lh3.googleusercontent.com/-bCw0qoqNkho/Vbo7sprnnlI/AAAAAAAAKl8/FwIFtBIQ8XY/s600/30.png\" alt=\"enter image description here\" title=\"30.png\"></p>\n<p>完成之後，我們只要輸入這台Azure VM的網址位置，使用 80  Port就可以看到結果了！！</p>\n<p><img src=\"https://lh3.googleusercontent.com/-sotNx5HRvQ4/Vbo7xmoZoOI/AAAAAAAAKmM/BufcehQw2_o/s600/11.png\" alt=\"enter image description here\" title=\"11.png\"></p>\n<h2>Commit</h2>\n<p>最後，如果我們登出的話，就gg了，剛剛做的事情就還要重來一次…Orz…所以這邊我們會用上一個章節教到 Commit 來簽入新版本。</p>\n<p>這邊，我們先用以下指令來查看這台容器的ID。</p>\n<p>sudo docker ps</p>\n<p>之後再下以下指令，來簽入。</p>\n<p>sudo docker commit -m=’簽入描述’ -a=’簽入者’ 7ce430e7c072 aspmvc/test:ver1</p>\n<p>完成後，我們可以再用 docker ps 來看一下結果。</p>\n<p><img src=\"https://lh3.googleusercontent.com/-qukMkVvSOOo/Vbo72tYBDyI/AAAAAAAAKmY/dKa_xG-VoTQ/s600/12.png\" alt=\"enter image description here\" title=\"12.png\"></p>\n<h2>備註</h2>\n<p>這篇基本上是參考<a href=\"http://blog.aminjam.com/hello-asp-net-5-on-docker/\">這篇</a>進行調整，原文內，他並不是在容器內下載 source ，而是在外面下載 source，並且透過掛載的方式掛上去。</p>\n<p>掛載的指令如下，將本地 OS 上的目錄掛載到 容器 內，而 ro 代表唯獨。</p>\n<p>-v [本地路徑]:[容器路徑]:ro </p>\n<p>基本上原文的做法會比較好，畢竟實務上，我們不可能每次都登入到容器裡面去下載 source 然後再簽入，直接從外部掛載的方式，會有極大的彈性，而這篇文章是為了示範，才調整了架構。</p>\n<h2>參考資料</h2>\n<ul>\n<li><a href=\"https://github.com/aspnet/aspnet-docker\">https://github.com/aspnet/aspnet-docker</a></li>\n<li><a href=\"http://blogs.msdn.com/b/webdev/archive/2015/01/14/running-asp-net-5-applications-in-linux-containers-with-docker.aspx\">http://blogs.msdn.com/b/webdev/archive/2015/01/14/running-asp-net-5-applications-in-linux-containers-with-docker.aspx</a></li>\n<li><a href=\"http://blog.aminjam.com/hello-asp-net-5-on-docker/\">http://blog.aminjam.com/hello-asp-net-5-on-docker/</a></li>\n<li><a href=\"http://www.codedata.com.tw/social-coding/docker-layman-abc/\">http://www.codedata.com.tw/social-coding/docker-layman-abc/</a></li>\n<li><a href=\"http://philipzheng.gitbooks.io/docker_practice/content/basic_concept/repository.html\">http://philipzheng.gitbooks.io/docker<em>practice/content/basic</em>concept/repository.html</a></li>\n<li><a href=\"http://www.openfoundry.org/tw/tech-column/9319-docker-101\">http://www.openfoundry.org/tw/tech-column/9319-docker-101</a></li>\n</ul>","excerpt":"上一篇，我們看到了，如何安裝 Docker，並且 Run Ubuntu，和進入來管理，而這篇，我們就來使用一下 Microsoft 提供的 ASP.NET 5 Preview Docker Image，順便學一下，如何讓外面的 Port 對應到容器內部的 Port…"}},"pageContext":{"type":"posts","next":{"frontmatter":{"path":null,"title":"在Ubuntu運行Docker","tags":["Azure","Docker","Linux","Ubuntu","VM"]},"fields":{"slug":"/2015/07/30/在Ubuntu運行Docker/"},"fileAbsolutePath":"/home/runner/work/blog.sanc.idv.tw/blog.sanc.idv.tw/src/posts/blog.sanc.idv.tw/在Ubuntu運行Docker.md"},"previous":{"frontmatter":{"path":null,"title":"建立自己的 Docker image","tags":["Azure","Docker","Linux","Ubuntu","VM"]},"fields":{"slug":"/2015/07/30/建立自己的-Docker-image/"},"fileAbsolutePath":"/home/runner/work/blog.sanc.idv.tw/blog.sanc.idv.tw/src/posts/blog.sanc.idv.tw/建立自己的-Docker-image.md"}}}}