{"componentChunkName":"component---src-templates-page-js","path":"/2015/11/02/JavaScript-Use_Javascript_Fetch/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"使用 fetch 來進行 Ajax 呼叫","date":"02 November 2015","author":"Sky Chang","excerpt":null,"tags":["JavaScript"],"coverImage":null},"id":"56dc73f7-93ad-5328-b489-3d1f63892f59","html":"<h2>前言</h2>\n<p>在很久很久很久很久以前 ( 好啦，其實也沒多久... )，那時 Ajax 正慢慢的紅起來，而如果大家剛好有經過那個時期，大概就會知道 XMLHttpRequest 這個東西，而如果那個時代又真的下去寫後，就會發現，阿，真是 OOXX 的有夠難寫....\n不過，大家也知道，這錯不是錯在 XMLHttpRequest 上，而是時代的混亂阿!! ( 其實現在也沒好到哪去...)</p>\n<p>而隨著時代的進步，我們開始擁有了 jQuery ，jQuery 幫我們把 XMLHttpRequest 封裝的好好的，並且解決了各種不同瀏覽器的判斷問題，讓我們快速的進入了新的網頁時代!!那時候看到 jQuery ，真的覺得，阿，他是神物阿!!!</p>\n<p>後來，又出現了 KO ( ASP.NET MVC 4 的時代 )，也依舊覺得他是神物....然後直到 Google 家的 NG ( AngularJS )，更又覺得他是神物中的神物，而 AngularJS 更是把一切要用的東西全部都封裝起來了，我們不用再使用 jQuery ( 雖然 NG 裡面也是包 jQuery Lite )，到這個階段時期，我們使用 AngularJS 後，我們幾乎就可以不用管最底層的 XMLHttpRequest ，也不用管在往上的 jQuery 。</p>\n<p>但又隨著時代的進步.... ( 其實說真的，也才幾年的時間... ) Facebook 的 React 大舉入侵，但 React 基本是指是代表著 View ，也就是說，他並沒有把一堆東西包的好好的，所以在早期的時候，要進行 Ajax ，可能還是要使用 jQuery ....</p>\n<p>但，歷史已經經過了那麼久，我們還是必須要使用 XMLHttpRequest ，其實不然，現在技術大混戰的時期，怎麼可能不推出新的東西哩 ( 爆 ) ，所以這新的東西是甚麼... 就是未來會建立於各個瀏覽器內，新的呼叫方式 fetch .</p>\n<h2>fetch</h2>\n<p>那甚麼是 fetch 勒? 為什麼要有這東西，基本上這篇不會談到這個，有興趣的可參考小弟的參考資料，神人大大們寫的已經很詳細了。總之就是要取代掉 XMLHttpRequest 的東西。</p>\n<p>那大家可能又會有疑問 \" Cool ，但現在所有瀏覽器都支援嗎? \" ，這個答案就如同 ES6 一樣，當然不支援阿 ( 狂暴 ) ，但雖然不支援，還是有很多神人寫出了 polyfill ，所以大家要知道的有兩件事情。</p>\n<ol>\n<li>fetch 是未來的一個呼叫標準。</li>\n<li>使用這個標準寫出來的 JS Lib 稱為 fetch.js ，來相容不同的瀏覽器. ( 當然，除了 fetch.js 外，也有各神人寫出來不同的 Lib )。</li>\n</ol>\n<h2>如何使用</h2>\n<p>這才是這篇的重點，基本上也是小弟自己希望未來要 copy 比較方便，所以順便寫了這篇 XDDD\n當然，要完整，還是建議看官網吧，小弟只是貼上自己常用的而已喔~~</p>\n<h2>Get</h2>\n<p>我們先用 Get 稍微看一下，基本上 fetch 他使用了 ES6 的 Promise ，所以後面都用 then 來接後續的動作。</p>\n<p>所以第一個 then，response 那邊，我們可以先用 status 來判斷 http 給我們的 status code，如果是 200 內，我們才會在使用 response.json() 來將資料轉成 json 格式。</p>\n<p>第二個 then 裡面的 data 才是真正的 json 物件.如果沒透過 then 基本上也只是個 Promise 物件而已喔~~</p>\n<p>第三個是 catch ，可以捕捉 throw 的例外，而這個例外可以用 new Error 來產生。</p>\n<p>最後，同樣的 error 裡面的資料，也必須使用response.json() 轉成物件，也同樣的，要最後一個 then 才能取得。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'目標URL'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n            method<span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">var</span> error <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span>\n                error<span class=\"token punctuation\">.</span>response <span class=\"token operator\">=</span> response\n                <span class=\"token keyword\">throw</span> error\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token comment\">// data 才是實際的 JSON 資料</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">errorData</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// errorData 裡面才是實際的 JSON 資料</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>總之，他回傳的都是 Promise 物件就是了~~</p>\n<h2>Post</h2>\n<p>如果是 Post，然後又是要用 JSON 溝通，我們可以加上 headers 這個標頭，而傳送的內容，則是放到 body 這個屬性裡面。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'網址'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n            method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n            headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">'Accept'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">checkStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">var</span> error <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span>\n                error<span class=\"token punctuation\">.</span>response <span class=\"token operator\">=</span> response<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \t<span class=\"token comment\">//完成</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request failed'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">errorData</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n           <span class=\"token comment\">//失敗</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Token 驗證</h2>\n<p>這邊是自己在後端實作了 OAuth 的驗證，基本上要透過 POST 來傳送 x-www-form-urlencoded 格式的帳號密碼。\n所以前面先進行了轉換並塞入到 formData 。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> formData <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>userForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">keyName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>keyName<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'='</span> <span class=\"token operator\">+</span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>userForm<span class=\"token punctuation\">[</span>keyName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'網址'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n            method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n            headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"Content-type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/x-www-form-urlencoded\"</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            body<span class=\"token operator\">:</span> formData\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">checkStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">var</span> error <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span>\n                error<span class=\"token punctuation\">.</span>response <span class=\"token operator\">=</span> response\n                <span class=\"token keyword\">throw</span> error\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token comment\">//成功取得 Token</span>\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request failed'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">errorData</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n           <span class=\"token comment\">//失敗</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>加上 Token 和 Get</h2>\n<p>這邊基本上就是加上了 Authorization 的 Header ，比較特別的是後面的 <code class=\"language-text\">Bearer ${token}</code>，這是 ES6 串字串的方法。 ( token 是變數 )。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'網址'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n            method<span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n             headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">'Authorization'</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>token<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">checkStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">var</span> error <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span>\n                error<span class=\"token punctuation\">.</span>response <span class=\"token operator\">=</span> response\n                <span class=\"token keyword\">throw</span> error\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token comment\">//成功取得 Token</span>\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request failed'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">errorData</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n           <span class=\"token comment\">//失敗</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>搭配 Promise</h2>\n<p>如果要搭配 Promise，可以這樣寫，底下的範例是，當我們有動態的參數，且每次都必須確保所以請求都完成後，才要繼續作業，這個情況下，我們就可以使用 Promise.all 來進行處理。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">let</span> promiseArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n           \n    <span class=\"token comment\">//用map 和 promiseArray 來收集 pormise , 有時因為網址會需要帶參數，</span>\n    <span class=\"token comment\">//而參數的內容在 datas 裡面，這邊 datas 裡面存放了 ID                              </span>\n    datas<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        promiseArray<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span> \n        <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">網址\\id</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n            method<span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n            headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">//這邊需要驗證，所以要加上這行，沒有驗證的朋友就不用加了</span>\n                <span class=\"token string\">'Authorization'</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>token<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">//使用 Promise.all ，來讓所有請求完成，才繼續下一步</span>\n    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>promiseArray<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 帶入 剛剛 map 回來的 promise Array</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n         <span class=\"token comment\">// 回來的也是個陣列，而且陣列裡面的物件是 response</span>\n         <span class=\"token comment\">// 因為我們還要確保回傳的 Json 也是要全部處理完，才能繼續...</span>\n         <span class=\"token comment\">// 所以這邊再繼續用 Promise.all 來處理</span>\n         <span class=\"token comment\">// ( Promise.all 裡面帶的參數就是 promise Array</span>\n         <span class=\"token comment\">// 而我們用 response.map 回來的就是 promise 陣列)</span>\n         Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> res<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span> \n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//map end</span>\n         <span class=\"token punctuation\">)</span> <span class=\"token comment\">//promise all end</span>\n         <span class=\"token comment\">// 因為我是使用 Promise.all ，</span>\n         <span class=\"token comment\">// 所以這邊的 then 就是 全部傳完成後，傳回來的資料</span>\n         <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//這邊就看要怎樣處理資料了~~</span>\n            <span class=\"token comment\">//底下是用 forEach 來逐一列出資料</span>\n            data<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d<span class=\"token punctuation\">,</span>i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">data is : $(d) ; Index is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>   \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>後記</h2>\n<p>基本上這篇就是稍微筆記筆記一下，相信未來應該會有人將這些東西包得更容易使用~~\n同樣的，這個小弟也還在測試中，如有錯誤，有請多包涵喔!!~</p>\n<h2>參考資料</h2>\n<ul>\n<li><a href=\"https://blog.othree.net/log/2014/11/25/fetch/\">https://blog.othree.net/log/2014/11/25/fetch/</a></li>\n<li><a href=\"https://blog.othree.net/log/2014/11/13/es6-promise/\">https://blog.othree.net/log/2014/11/13/es6-promise/</a></li>\n<li><a href=\"https://github.com/github/fetch\">https://github.com/github/fetch</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-TW/docs/HTTP/Access_control_CORS\">https://developer.mozilla.org/zh-TW/docs/HTTP/Access<em>control</em>CORS</a></li>\n<li><a href=\"http://stackoverflow.com/questions/31710768/how-can-i-fetch-an-array-of-urls-with-promise-all\">http://stackoverflow.com/questions/31710768/how-can-i-fetch-an-array-of-urls-with-promise-all</a></li>\n</ul>","excerpt":"前言 在很久很久很久很久以前 ( 好啦，其實也沒多久... )，那時 Ajax 正慢慢的紅起來，而如果大家剛好有經過那個時期，大概就會知道 XMLHttpRequest 這個東西，而如果那個時代又真的下去寫後，就會發現，阿，真是 OOXX…"}},"pageContext":{"type":"posts","next":{"frontmatter":{"path":null,"title":"Hexo - 版本控制與發佈到 GitHub","tags":["Node.js","Hexo","GitHub"]},"fields":{"slug":"/2015/10/19/Hexo-Source_Control_and_Deploy/"},"fileAbsolutePath":"/home/runner/work/blog.sanc.idv.tw/blog.sanc.idv.tw/src/posts/Hexo-Source_Control_and_Deploy/Hexo-Source_Control_and_Deploy.md"},"previous":{"frontmatter":{"path":null,"title":"VSTS - VSTS Build 設定篇","tags":["Azure","VSTS","CI/CD","Release Management"]},"fields":{"slug":"/2015/11/30/VSTS-Build_Setup/"},"fileAbsolutePath":"/home/runner/work/blog.sanc.idv.tw/blog.sanc.idv.tw/src/posts/VSTS-Build_Setup/VSTS-Build_Setup.md"}}}}