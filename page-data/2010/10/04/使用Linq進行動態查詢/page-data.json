{"componentChunkName":"component---src-templates-page-js","path":"/2010/10/04/使用Linq進行動態查詢/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"使用Linq進行動態查詢","date":"04 October 2010","author":"Sky Chang","excerpt":null,"tags":["Entity Framework","Linq"],"coverImage":null},"id":"52b5183d-d656-5c8a-8c58-9a00aaac187d","html":"<p>好吧，我真的不知道該怎麼翻這種查詢，</p>\n<p>還記得早期的時候( 其實現在應該也有在大量使用...)</p>\n<p>遇到一些複合式的查詢，例如兩個TextBox分別是姓名與電話，</p>\n<p>只輸入電話的話，就要列出所有找到的電話，</p>\n<p>如果同時輸入姓名與電話的話，就要同時查詢含有電話與姓名的資料。</p>\n<p>當時，我們可能會用判斷TextBox是否為空值，來動態加上 Phone = '@Phone' 這種查詢語法，</p>\n<p>但是，這在Linq是不適用的= =，</p>\n<p>Linq下當然會有一些解決方案，<a name='more'></a></p>\n<p>我這裡提出的是比較簡單的方法，不過缺點是要引入作者寫的dll，</p>\n<p>而這位就是鼎鼎大名的C# IN A Nustshel的作者</p>\n<p>原文在此如下</p>\n<p><a href=\"http://www.albahari.com/nutshell/predicatebuilder.aspx\">http://www.albahari.com/nutshell/predicatebuilder.aspx</a></p>\n<p>以下是我寫得簡單的範例，這部分，可能未來還會再整理。</p>\n<pre class=\"brush: csharp\">       //針對CusName欄位進行關鍵字搜索。\npublic List&lt;Cust&gt; searchKWor(params string[] keywords)\n{\n  var predicate = PredicateBuilder.False&lt;Cust&gt;();\n\n  foreach (string keyword in keywords)\n  {\n    string temp = keyword;\n    predicate = predicate.Or(cust =&gt; cust.CusName.Contains(temp));\n  }\n  IQueryable&lt;Cust&gt;  searchCustCusName = shDBContext.Cust.AsExpandable().Where(predicate);\n\n  List&lt;Cust&gt; custs = new List&lt;Cust&gt;();\n\n  foreach (var Cust in searchCustCusName)\n  {\n    custs.Add(Cust);\n  }\nreturn custs;\n}\n\n//依照欲輸入的CusName欄位進行查詢。\npublic override List&lt;dynamic&gt; searchKWAll(object o)\n{\n  Cust cust = o as Cust;\n  var predicate = PredicateBuilder.False&lt;Cust&gt;();\n\n  //基本資料查詢\n  predicate = predicate.Or(c =&gt; c.Sn == cust.Sn );\n  predicate = predicate.Or(c =&gt; c.CusName.Contains(cust.CusName));\n  predicate = predicate.Or(c =&gt; c.CusNo.Contains(cust.CusNo));\n  predicate = predicate.Or(c =&gt; c.Boss.Contains(cust.Boss));\n  predicate = predicate.Or(c =&gt; c.CusJobName.Contains(cust.CusJobName));\n  predicate = predicate.Or(c =&gt; c.biten.Contains(cust.biten));\n  predicate = predicate.Or(c =&gt; c.Reward.Contains(cust.Reward));\n  predicate = predicate.Or(c =&gt; c.RepName.Contains(cust.RepName));\n\n  //地址\n  predicate = predicate.Or(c =&gt; c.Addr.Contains(cust.Addr));\n  predicate = predicate.Or(c =&gt; c.ApplAddr.Contains(cust.Addr));\n  //電話\n  predicate = predicate.Or(c =&gt; c.HPhone.Contains(cust.HPhone));\n  predicate = predicate.Or(c =&gt; c.OPhone.Contains(cust.HPhone));\n  predicate = predicate.Or(c =&gt; c.OPhone2.Contains(cust.HPhone));\n  predicate = predicate.Or(c =&gt; c.MPhone.Contains(cust.HPhone));\n  predicate = predicate.Or(c =&gt; c.MPhone2.Contains(cust.HPhone));\n  predicate = predicate.Or(c =&gt; c.FAX.Contains(cust.HPhone));\n  predicate = predicate.Or(c =&gt; c.FAX2.Contains(cust.HPhone));\n\n  predicate = predicate.Or(c =&gt; c.TINo.Contains(cust.TINo));\n  predicate = predicate.Or(c =&gt; c.IdNo.Contains(cust.IdNo));\n  predicate = predicate.Or(c =&gt; c.EMP == cust.EMP);\n\n  IQueryable&lt;Cust&gt; searchCustCusName = shDBContext.Cust.AsExpandable().Where(predicate);\n\n  List&lt;dynamic&gt; custs = new List&lt;dynamic&gt;();\n\n  foreach (var Cust in searchCustCusName)\n  {\n    custs.Add(Cust);\n  }\nreturn custs;\n}\n</pre>","excerpt":"好吧，我真的不知道該怎麼翻這種查詢， 還記得早期的時候( 其實現在應該也有在大量使用...) 遇到一些複合式的查詢，例如兩個TextBox…"}},"pageContext":{"type":"posts","next":{"frontmatter":{"path":null,"title":"TFS 2010 Team Build 後自動發佈","tags":["TFS","Visual Studio"]},"fields":{"slug":"/2010/09/02/TFS-2010-Team-Build-後自動發佈/"},"fileAbsolutePath":"/home/runner/work/blog.sanc.idv.tw/blog.sanc.idv.tw/src/posts/blog.sanc.idv.tw/TFS-2010-Team-Build-後自動發佈.md"},"previous":{"frontmatter":{"path":null,"title":"ASP.NET MVC 、AJAX、img標籤當button的問題","tags":["ASP.NET MVC","HTML","JavaScript"]},"fields":{"slug":"/2011/01/25/ASP-NET-MVC-、AJAX、img標籤當button的問題/"},"fileAbsolutePath":"/home/runner/work/blog.sanc.idv.tw/blog.sanc.idv.tw/src/posts/blog.sanc.idv.tw/ASP-NET-MVC-、AJAX、img標籤當button的問題.md"}}}}