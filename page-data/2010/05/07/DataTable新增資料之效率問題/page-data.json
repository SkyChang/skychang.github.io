{"componentChunkName":"component---src-templates-page-js","path":"/2010/05/07/DataTable新增資料之效率問題/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"DataTable新增資料之效率問題","date":"07 May 2010","author":"Sky Chang","excerpt":null,"tags":["ASP.NET"],"coverImage":null},"id":"837062d7-93df-5cde-86b6-5dff774c6521","html":"<p>最近讀到一篇不錯的文章，</p>\n<p>內容是在說使用DataTable新增資料，怎樣才會快</p>\n<p>[原文</p>\n<p>](<a href=\"http://marlon.blog.ithome.com.tw/post/894/70698\">http://marlon.blog.ithome.com.tw/post/894/70698</a>)此外，原作者還有很多不錯的文章，大家可以去看看。</p>\n<p>我引用了這篇原文，順便加上些自己的看法與註解。</p>\n<p>DataTable 新增資料，這麼簡單的問題有誰不會？但是您用對方法了嗎？如果是新增一筆資料給使用者輸入，用什麼方法沒有太大的差別，但如果是用程式碼大量新增資料，不同的方法時間可以差上數倍，欄位越多越明顯，廢話不多說，直接看不同的寫法測試數據</p>\n<p>測試 20 個字串欄位及 20 個整數欄位, 無 Constraints, 新增 10000 筆資料,</p>\n<p>每種方法測試10次, 去除最大及最小值後分列列出其餘8次中 (最小值, 平均值, 最大值), 單位 Milliseconds</p>\n<p>( 有興趣者可測試有 Constraints 時方法一與方法二的差異 )</p>\n<p>方法一  ( 405.6, 416.0, 426.4 )</p>\n<pre class=\"brush: csharp\">DataRow row;\nfor (int rowIndex = 1; rowIndex &lt;= RowCount; rowIndex++)\n{\n  row = table.NewRow();\n  for (int i = 1; i &lt;= ColCount; i++)\n  {\n    row[&quot;ColString&quot; + i.ToString()] = string.Concat(rowIndex.ToString(), &quot;.&quot;, i.ToString());\n    row[&quot;ColInt&quot; + i.ToString()] = rowIndex * 1000 + i;\n  }\ntable.Rows.Add(row);\n}\n</pre>\n<p>SanC : 這是我們最常用的方法，在撰寫時，算是最直覺的寫法。</p>\n<p>方法二 ( 390.0, 395.9, 405.6 )</p>\n<pre class=\"brush: csharp\">DataRow row;\ntable.BeginLoadData();\nfor (int rowIndex = 1; rowIndex &lt;= RowCount; rowIndex++)\n{\n  row = table.NewRow();\n  for (int i = 1; i &lt;= ColCount; i++)\n  {\n    row[&quot;ColString&quot; + i.ToString()] = string.Concat(rowIndex.ToString(), &quot;.&quot;, i.ToString());\n    row[&quot;ColInt&quot; + i.ToString()] = rowIndex * 1000 + i;\n  }\ntable.Rows.Add(row);\n}\ntable.EndLoadData();\n</pre>\n<p>SanC:</p>\n<p>這個方法修正了方法一的地方，</p>\n<p>最顯著的是將使用table.BeginLoadData()和table.EndloadData()放在最外圈，</p>\n<p>我的猜測，再沒寫這兩個Function時，當執行10000次時，也同時呼叫了10000次的這兩個function</p>\n<p>所以，速度也慢了。</p>\n<p>方法三 ( 234.0, 245.1, 254.8 )</p>\n<pre class=\"brush: csharp\">int[] strColIndex = new int[ColCount];\nint[] intColIndex = new int[ColCount];\nfor (int i = 1; i &lt;= ColCount; i++)\n{\n  strColIndex[i - 1] = table.Columns[&quot;ColString&quot; + i.ToString()].Ordinal;\n  intColIndex[i - 1] = table.Columns[&quot;ColInt&quot; + i.ToString()].Ordinal;\n}\n\nDataRow row;\ntable.BeginLoadData();\nfor (int rowIndex = 1; rowIndex &lt;= RowCount; rowIndex++)\n{\n  row = table.NewRow();\n  for (int i = 1; i &lt;= ColCount; i++)\n  {\n    row[strColIndex[i - 1]] = string.Concat(rowIndex.ToString(), &quot;.&quot;, i.ToString());\n    row[intColIndex[i - 1]] = rowIndex * 1000 + i;\n  }\ntable.Rows.Add(row);\n}\ntable.EndLoadData();\n</pre>\n<p>SanC:</p>\n<p>這裡使用陣列strColIndex和intColIndex來存欄位名稱的編號</p>\n<p>(　例如: 欄位名稱ColSting1的編號為1 ColString2的編號為2 )</p>\n<p>此陣列就是來存取此值，</p>\n<p>然後在新增資料的時候，使用的不是用字串當索引</p>\n<p>( 字串當索引 row[\"ColString1\"] )</p>\n<p>而是使用數字( 編號 )當索引，在不經過查詢(轉換)的過程，</p>\n<p>使得速度更快了。</p>\n<p>方法四 ( 119.6, 127.4, 135.2 ) - 較佳寫法, 使用 object[] 新增資料</p>\n<pre class=\"brush: csharp\">int[] strColIndex = new int[ColCount];\nint[] intColIndex = new int[ColCount];\nfor (int i = 1; i &lt;= ColCount; i++)\n{\n  strColIndex[i-1] = table.Columns[&quot;ColString&quot; + i.ToString()].Ordinal;\n  intColIndex[i-1] = table.Columns[&quot;ColInt&quot; + i.ToString()].Ordinal;\n}\n\nobject[] itemArray;\ntable.BeginLoadData();\nfor (int rowIndex = 1; rowIndex &lt;= RowCount; rowIndex++)\n{\n  itemArray = new object[table.Columns.Count];\n  for (int i = 1; i &lt;= 10; i++)\n  {\n    itemArray[strColIndex[i-1]] = string.Concat(rowIndex.ToString(), &quot;.&quot;, i.ToString());\n    itemArray[intColIndex[i-1]] = rowIndex * 1000 + i;\n  }\ntable.Rows.Add(itemArray);\n}\ntable.EndLoadData();\n</pre>\n<p>SanC:</p>\n<p>又更加的改進，這裡使用object來做處理，而非使用DataRow來新增，</p>\n<p>先建立一個名為 itemArray的object陣列</p>\n<p>然後再將每個資料塞到陣列裡的每個物件裡，</p>\n<p>然後再用table.Rows.Add(itemArray)來新增所有資料</p>\n<p>這是最快的處理方法，至於為何，只能猜測因為object型別最單純!?</p>\n<p>或是中間不需要經過轉換的過程。</p>","excerpt":"最近讀到一篇不錯的文章， 內容是在說使用DataTable新增資料，怎樣才會快 [原文 ](http://marlon.blog.ithome.com.tw/post/894/7069…"}},"pageContext":{"type":"posts","next":{"frontmatter":{"path":null,"title":"RSS 2.0 樣板","tags":["RSS","快速使用"]},"fields":{"slug":"/2010/05/03/RSS-2-0-樣板/"},"fileAbsolutePath":"/home/runner/work/blog.sanc.idv.tw/blog.sanc.idv.tw/src/posts/blog.sanc.idv.tw/RSS-2-0-樣板.md"},"previous":{"frontmatter":{"path":null,"title":"SQL Manager express 防止儲存變更","tags":["SQL Server"]},"fields":{"slug":"/2010/05/07/SQL-Manager-express-防止儲存變更/"},"fileAbsolutePath":"/home/runner/work/blog.sanc.idv.tw/blog.sanc.idv.tw/src/posts/blog.sanc.idv.tw/SQL-Manager-express-防止儲存變更.md"}}}}