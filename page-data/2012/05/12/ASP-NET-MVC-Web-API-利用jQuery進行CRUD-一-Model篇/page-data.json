{"componentChunkName":"component---src-templates-page-js","path":"/2012/05/12/ASP-NET-MVC-Web-API-利用jQuery進行CRUD-一-Model篇/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"ASP.NET MVC Web API - 利用jQuery進行CRUD! (一) Model篇","date":"12 May 2012","author":"Sky Chang","excerpt":null,"tags":["ASP.NET MVC","Design Patten","JavaScript","jQuery","Unit Test"],"coverImage":null},"id":"662fffb5-c108-522d-ac0b-1467c9b7795d","html":"<h4>支援版本</h4>\n<ul>\n<li>ASP.NET MVC 4 Beta </li>\n</ul>\n<p>上一篇我們寫了超級簡單的ASP.NET MVC Web API Hello World!，那這樣就結束了嗎!?當然不是，至少要把CRUD給講完吧( CRUD就是針對資料庫的Table進行Create、Read、Update、Delete的縮寫 )，所以這篇我們就來看看，一個寫好的ASP.NET MVC Web API，要怎樣配合使用。</p>\n<p>( 這篇文章主要來源為ASP.NET官網的<a href=\"http://www.asp.net/web-api/overview/web-api-routing-and-actions/creating-a-web-api-that-supports-crud-operations\">教學</a>，在經過小弟的改編與添加一堆雜七雜八的東西XD )</p>\n<h4>前期提要</h4>\n<p>通常漫畫前面都會有一個前期提要，畢竟前篇拖的時間也有點久了，所以這邊就稍微的劇情回顧一下吧XD，首先，我們談到ASP.NET MVC Web API，其實Web API就是透過HTTP的一個Web Service，所謂的Service，就是一個服務窗口，你可以透過這個窗口進行某些事情 ( 例如:傳簡訊的Web Service，就可以把電話號碼與內容透過HTTP呼叫此服務，然後就開始發送。 )，而前端的設備，舉凡普通的網頁，到最夯的Win 8 Metro Style ( 不是淡定紅茶喔! )，都可以利用使用Web Service，因為是用最常用的HTTP阿!!，而Web Service通常會回傳個訊息回來 ( 例如:簡訊服務可能會回傳有沒有發送成功 )，而ASP.NET MVC Web API預設回傳的資料是使用JSON格式，而ASP.NET MVC Web API又是使用Rest Style風格，也就是利用HTTP標準的Get、Put、Delete、Post四種命令，來對應CRUD…但到底要怎麼做呢!?讓我們拭目以待!</p>\n<p>( 好長的前期提要喔= =…突然發現寫漫畫前期提要的人，真是厲害… )</p>\n<h4>新增一個空專案開始</h4>\n<p>這次我們的目標是建立一個簡單的客戶新增修改刪除查詢系統，整個過程並不會動到資料庫，我們會用Collection模擬的方式來進行，所以真的不會用到資料庫。</p>\n<h4>建立要撰寫JavaScript的View</h4>\n<p>首先，我們當然是要先新增一個ASP.NET MVC 4 Web Application專案，然後取個帥氣的專案名子( 相信我，有帥氣的名子，專案就成功一半了，但記得要取和這個專案有關的名子喔!這樣未來才不會誤刪- - )</p>\n<p><a href=\"http://lh6.ggpht.com/-1X_b06gzbgM/T6034CDEsxI/AAAAAAAACgY/1bOnTO7aBvY/s1600-h/image%25255B4%25255D.png\"><img src=\"http://lh3.ggpht.com/-c6ECGEludAU/T6035TDUaRI/AAAAAAAACgg/L4VziN0xkfc/image_thumb%25255B2%25255D.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>接下來，我們選擇空專案吧，自己來比較有感覺嘛XDD，接下來，View Engine就選擇Razor吧，自從ASP.NET MVC 3開始，Razor就變成小弟的最愛了。</p>\n<p><a href=\"http://lh6.ggpht.com/-8Q0LQw_GlL8/T6036debm0I/AAAAAAAACgo/XV7gvM9toj8/s1600-h/image%25255B9%25255D.png\"><img src=\"http://lh4.ggpht.com/-oBtPQLkXNTU/T6038hZUtOI/AAAAAAAACgw/YTz-LJmOBEU/image_thumb%25255B5%25255D.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>接下來，我們先建一個Controller。</p>\n<p><a href=\"http://lh5.ggpht.com/-KS4df8mvVbo/T6039VTGpzI/AAAAAAAACg0/QuWb1MMoWhg/s1600-h/image%25255B14%25255D.png\"><img src=\"http://lh3.ggpht.com/-v7BmAnoZxzY/T603-XxECPI/AAAAAAAAChA/CRjpQtqABdU/image_thumb%25255B8%25255D.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>我們取名為HomeController，然後Template選擇Empty Controller，這個Controller未來只會建立一個View，這個View裡面，小弟我會去撰寫JavaScript的程式碼 ( 會用jQuery這個函式庫來簡化處理原本攏長的JavaScript。 )</p>\n<p><a href=\"http://lh5.ggpht.com/-9yPzyVacTSc/T603_SK2n-I/AAAAAAAAChE/uxpMJ5hKQz4/s1600-h/image%25255B19%25255D.png\"><img src=\"http://lh3.ggpht.com/-615Zdb3EcY0/T604AQzs1xI/AAAAAAAAChM/xoKwd2xhmrQ/image_thumb%25255B11%25255D.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>建好的程式碼如下，也不用做甚麼變動。</p>\n<pre class=\"brush: csharp;\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\nusing System.Web.Mvc;\n\nnamespace MvcWebApiCRUDDemo.Controllers\n{\n    public class HomeController : Controller\n    {\n        //\n        // GET: /Home/\n\n        public ActionResult Index()\n        {\n            return View();\n        }\n\n    }\n}\n</pre>\n<p>接下來，我們要建立這個Controller的View，建立這個View很簡單，我們只要在程式碼的Public ActionResult Index()的Index這幾個字上，按下滑鼠右鍵，就會出現如下圖的視窗，然後就可以輕鬆地加上View ( 超適合小弟的懶人方法!! )</p>\n<p><a href=\"http://lh3.ggpht.com/-uIh7vWjzOYY/T604BT_AJ6I/AAAAAAAAChU/GkPj2-KAF3c/s1600-h/image%25255B24%25255D.png\"><img src=\"http://lh4.ggpht.com/-wvafU9FKrt0/T604CSO9EYI/AAAAAAAAChg/8zskpR42Wmo/image_thumb%25255B14%25255D.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>接下來，我們看一下View的name正不正確，然後取消勾選Use a layout or master page，那是因為目前我們也沒有用到master或是layout的機制，所以直接取消就可以了。</p>\n<p><a href=\"http://lh6.ggpht.com/-Yhgz6EoVaxA/T604DWXjjOI/AAAAAAAAChk/3-KOFPgyJwI/s1600-h/image%25255B29%25255D.png\"><img src=\"http://lh6.ggpht.com/-UUUrQvVliZ0/T604GZVfaFI/AAAAAAAAChw/2zbhMyUTgRg/image_thumb%25255B17%25255D.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>到這邊，這個View暫時先這樣就可以了，我們可以run run看；沒錯，就會如下圖，空白一片，我很想加上Hello World，但現在畢竟不是做ASP.NET MVC 4的Demo，所以暫時先這樣就可以了，晚一點，我們會回頭再加上東西。</p>\n<p><a href=\"http://lh4.ggpht.com/-7SdWYaIcsZs/T604HC56NfI/AAAAAAAACh0/HOjgFX_jNmc/s1600-h/image%25255B34%25255D.png\"><img src=\"http://lh6.ggpht.com/-YJR1aToCQps/T604H2XZ-JI/AAAAAAAACh8/-UsEWpF-2_I/image_thumb%25255B20%25255D.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<h4>開始建立資料</h4>\n<p>好，看了那麼多圖，應該比較不會想睡覺了吧XDD，接下來我們Key一下程式碼吧。</p>\n<h4>建立客戶類別</h4>\n<p>我們要先建立好我們的Model，而這次整個專案，最重要的就是客戶這個Model，所以我們要先建立這個Class，我們從Model的資料夾準備加入一個新的Class。</p>\n<p><a href=\"http://lh4.ggpht.com/-HSJ1tjZYX0E/T604I3EDHUI/AAAAAAAACiE/x_PjqDQQN18/s1600-h/image%25255B38%25255D.png\"><img src=\"http://lh4.ggpht.com/-TrQbYfzvWMs/T604J4ffAfI/AAAAAAAACiQ/-j9I0L3KlRQ/image_thumb%25255B22%25255D.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>接下來，我們選擇類別，並命名為Customer。</p>\n<p><a href=\"http://lh4.ggpht.com/-umJwtDbjjN4/T604LNuqtuI/AAAAAAAACiY/gcrM3a4iLfM/s1600-h/image%25255B43%25255D.png\"><img src=\"http://lh6.ggpht.com/-q3egEgvCTZs/T604MX-fNUI/AAAAAAAACig/ZT-K7ChyOK4/image_thumb%25255B25%25255D.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>然後加入Id、Name、Phone，就是這麼的簡單，如下。</p>\n<pre class=\"brush: csharp;\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\n\nnamespace MvcWebApiCRUDDemo.Models\n{\n    public class Customer\n    {\n        public int Id { get; set; }\n        public string Name { get; set; }\n        public string Phone { get; set; }\n    }\n}\n</pre>\n<p>到這邊，我們Model就建立好了，這個Customer就像是一筆資料一樣，接下來，我們要開始準備實做倉儲的地方，也就是像存放這些Customer的Collection。</p>\n<h4>實作Repository Patten</h4>\n<p>這種做法實際上是一種Repository Patten，又稱為倉儲模式，它的用途是在資料庫間多加一層，讓我們將資料存取的方法給隔離，所以我們就不會在整個專案世界到處都塞滿一堆SQL，我們會把所有存取資料庫的方法都放到Repository Class裡面來，所以就如其名，他就像是一個倉庫，存放著所有的資料，我們需要甚麼資料，就透過他來提取 ( 當然，新增、刪除也是嚕 )，這裡小弟我這邊就不細講了，基本上這個東西和ASP.NET MVC是完全沒關係的，但我們通常寫ASP.NET MVC的時候，都會利用這種Patten，來與資料庫溝通，有興趣的可以去Google一下=v=。</p>\n<p>首先，我們一樣在Model的目錄下加上一個介面，不要看到介面就覺得很可怕，想離開這頁XDD，就如小弟說，這個Patten，是和ASP.NET MVC無關的，就算真的不懂，也可以照樣畫葫蘆，很簡單的，而且如果人家問的話，就可以很臭屁的說，這是一個Patten!!，這樣有沒有感覺很讚了XDDD。</p>\n<p><a href=\"http://lh4.ggpht.com/-MAiQIUaKMRc/T604NipYDlI/AAAAAAAACio/fib9IiDFyzE/s1600-h/image%25255B53%25255D.png\"><img src=\"http://lh4.ggpht.com/-AGfBwOeniA0/T604OlOwwYI/AAAAAAAACiw/rYhSHBfsxkk/image_thumb%25255B31%25255D.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>接下來，我們要在這個介面裡面定義一些方法，看到這些方法，有沒有豁然開朗的感覺了!?，沒錯，我們這邊定義的方法，其實就是CRUD嘛，就如上面所說，我們就是打算透過Repository Class的這些方法來操作資料庫的CRUD，這樣子，我們的SQL就不換散落在世界各地了。</p>\n<pre class=\"brush: csharp;\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\n\nnamespace MvcWebApiCRUDDemo.Models\n{\n    //這裡要實作ICustomerRepository\n    public class CustomerRepository :ICustomerRepository\n    {\n        //我們利用List來充當資料庫。\n        private List&lt;customer&gt; _customers = new List&lt;customer&gt;();\n        private int _nextId = 1;//這個用途是拿來當作index\n\n        public CustomerRepository()\n        {\n            //總不能都是空吧&gt;\"&lt;，所以一開始塞一些假資料。\n            this.Add(new Customer() { Name = \"Sky\", Phone = \"0988888888\" });\n            this.Add(new Customer() { Name = \"Andy\", Phone = \"0977777777\" });\n            this.Add(new Customer() { Name = \"Tracy\", Phone = \"0966666666\" });\n        }\n\n        //我們未來可以透過這個方法取得所有的資料\n        public IQueryable&lt;customer&gt; GetAll()\n        {\n            //反正就是回傳整個List，並轉成IQueryable型別\n            return _customers.AsQueryable();\n        }\n\n        //我們未來可以透過這個方法取得單筆資料\n        public Customer Get(int id)\n        {\n            //尋找符合id的資料\n            return _customers.Find(c =&gt; c.Id == id);\n        }\n\n        ////我們未來可以透過這個方法新增資料\n        public Customer Add(Customer customer)\n        {\n            //index終於有用了，新增一筆前，我們先把目前的id給Customer.Id\n            //並且把_nextId++\n            customer.Id = _nextId++;\n            _customers.Add(customer);//加入List\n            return customer;\n        }\n        ////我們未來可以透過這個方法刪除資料\n        public bool Delete(int id)\n        {   //先找到目標\n            Customer customer = _customers.Find(c =&gt; c.Id == id);\n            //如果找不到，就回傳False\n            if (customer == null)\n            {\n                return false;\n            }\n            //然後刪除\n            _customers.Remove(customer);\n            return true;\n        }\n\n        ////我們未來可以透過這個方法更新資料\n        public bool Update(Customer customer)\n        {\n            //先找找看index\n            int index = _customers.FindIndex(c =&gt; c.Id == customer.Id);\n            if (index == -1)\n            {\n                return false;\n            }\n            //更新資料\n            _customers[index].Name = customer.Name;\n            _customers[index].Phone = customer.Phone;\n            return true;\n        }\n    }\n}\n</pre>\n<p>到目前為止，我們就把整個資料準備好了，到這邊讓小弟我休息一下，去泡的淡定紅茶吧XDD。</p>\n<h4>後記</h4>\n<p>老實說，Repository算是一個不錯的好物，不但有上面說的優點，更可以方便測試，而且未來針對Controller的部分，要寫Unit Test就更加容易了，下一篇，我們會開始針對Web API，看看怎樣配合Repository，並且把Web API給完成!。</p>\n<h4>參考資料</h4>\n<ul>\n<li><a href=\"http://www.asp.net/web-api/overview/web-api-routing-and-actions/creating-a-web-api-that-supports-crud-operations\" title=\"http://www.asp.net/web-api/overview/web-api-routing-and-actions/creating-a-web-api-that-supports-crud-operations\">http://www.asp.net/web-api/overview/web-api-routing-and-actions/creating-a-web-api-that-supports-crud-operations</a></li>\n</ul>","excerpt":"支援版本 ASP.NET MVC 4 Beta  上一篇我們寫了超級簡單的ASP.NET MVC Web API Hello World!，那這樣就結束了嗎!?當然不是，至少要把CRUD給講完吧( CRUD就是針對資料庫的Table進行Create、Read、Update…"}},"pageContext":{"type":"posts","next":{"frontmatter":{"path":null,"title":"C# -  new和override的差異與目的","tags":["C#"]},"fields":{"slug":"/2012/05/10/C-new和override的差異與目的/"},"fileAbsolutePath":"/home/runner/work/blog.sanc.idv.tw/blog.sanc.idv.tw/src/posts/blog.sanc.idv.tw/C-new和override的差異與目的.md"},"previous":{"frontmatter":{"path":null,"title":"ASP.NET MVC Web API - 利用jQuery進行CRUD! (二) Controller篇","tags":["ASP.NET MVC","Design Patten","快速使用"]},"fields":{"slug":"/2012/05/18/ASP-NET-MVC-Web-API-利用jQuery進行CRUD-二-Controller篇/"},"fileAbsolutePath":"/home/runner/work/blog.sanc.idv.tw/blog.sanc.idv.tw/src/posts/blog.sanc.idv.tw/ASP-NET-MVC-Web-API-利用jQuery進行CRUD-二-Controller篇.md"}}}}