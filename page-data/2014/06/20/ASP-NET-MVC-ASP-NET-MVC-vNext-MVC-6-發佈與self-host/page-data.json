{"componentChunkName":"component---src-templates-page-js","path":"/2014/06/20/ASP-NET-MVC-ASP-NET-MVC-vNext-MVC-6-發佈與self-host/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"ASP.NET MVC - ASP.NET MVC vNext ( MVC 6) 發佈與self host","date":"20 June 2014","author":"Sky Chang","excerpt":null,"tags":["ASP.NET MVC","NuGet","Visual Studio"],"coverImage":null},"id":"9816e3a0-283a-590d-ab77-027b8631e62f","html":"<p>此回介紹ASP.NET MVC的一個重大功能，self host與publish。</p>\n<p>從MVC 5開始，ASP.NET MVC就開始計畫與實作傳說中的OWIN，OWIN的全名就是<a href=\"http://owin.org/\">Open Web Interface for .Net</a>；我們思索一下，從以前開始，ASP.NET都必須要掛載在IIS之上，而ASP.NET也從以前至今，都必須相依於system.web等等的Lib；換言之，沒有IIS，ASP.NET也就等於死翹翹…</p>\n<p>而這個混亂的時代下，就出現了OWIN這種東西，將原本的相依性，透過定義好一個一個的介面，來達到未來抽換的一個目的。</p>\n<p>好啦，講白一點，就是可以不用IIS就可以讓ASP.NET運作啦!!而所謂的self host，就是用命令模式的方式，讓程式在那邊監聽瀏覽器等的請求，而不用IIS啦!!</p>\n<p>而到了新版的ASP.NET MVC這功能就更加強大了，所以第四回合，就來體驗一下吧!!</p>\n<p>首先，我們要先透過NuGet載入一個監聽器，也就是底下的Microsoft.AspNet.Server.WebListener這個字串，當然我們要在project.json底下去新增… ( UI介面的趕快出來吧… )；完成之後，我們再加上下面這段Commands，這個Commands可以定義要用哪個port監聽等等之類的命令列參數。</p>\n<p><a href=\"http://lh6.ggpht.com/-dvATPeszWKw/U6SxGJ9JvsI/AAAAAAAAJYA/E9yMIQFGJhI/s1600-h/image28.png\"><img src=\"http://lh5.ggpht.com/-gdMy-t7cLGU/U6SxHUT_YyI/AAAAAAAAJYI/HneWyiPwIoY/image_thumb16.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>全部的json config如下，有需要的人就直接copy吧~</p>\n<pre class=\"brush: js;\">{\n    \"dependencies\": {\n        \"Helios\": \"0.1-alpha-*\",\n        \"Microsoft.AspNet.Mvc\": \"0.1-alpha-*\",\n        \"Microsoft.AspNet.Server.WebListener\": \"0.1-alpha-*\"\n    },\n    \"commands\": { /* Change the port number when you are self hosting this application */ \n        \"web\": \"Microsoft.AspNet.Hosting --server Microsoft.AspNet.Server.WebListener --server.urls http://localhost:5000\"\n    },\n    \"configurations\": {\n        \"net45\": {},\n        \"k10\": { }\n    }\n}\n</pre>\n<p>完成後，我們就可以在命令列下使用k web這個指令來將常駐run起來 ( <a href=\"http://blog.sanc.idv.tw/2014/05/aspnet-mvc-kvm.html\">可以參考KVM那篇</a> )。</p>\n<p>( PS 因為我們Commands底下是\"web\" : xxxxx，所以用k web，如果是其他的字，例如\"web8080\" : xxx 那就要輸入k web8080，換言之，我們可以定義多個，來達到不同的目的。 )</p>\n<p>好self host KVM那篇已經試驗過了，接下來我們看一下佈署。</p>\n<p>基本上佈署的設定和之前沒啥兩樣。</p>\n<p><a href=\"http://lh3.ggpht.com/-HsLJPsX-H6Q/U6SxIZlVRaI/AAAAAAAAJYQ/S8pEP56PKUs/s1600-h/image4.png\"><img src=\"http://lh3.ggpht.com/-f61USlRskDk/U6SxJSqpSfI/AAAAAAAAJYY/BAG9gF_aGSc/image_thumb21.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>但我們這邊準備要把WEB丟到USB ( 假設要丟到USB…實際上我是把他傳到另外一台電腦上面去RUN )，所以這邊選擇要佈署到File System。</p>\n<p><a href=\"http://lh4.ggpht.com/-_tzmZcwxqJA/U6SxKNyDSaI/AAAAAAAAJYg/iRWTyYPMRh4/s1600-h/image10.png\"><img src=\"http://lh5.ggpht.com/-eqon58cWxCE/U6SxLPccBBI/AAAAAAAAJYo/n_M0ue7-uNs/image_thumb6.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>就…打一下Customer Profile名稱…</p>\n<p><a href=\"http://lh5.ggpht.com/-v29-k5lLpA8/U6SxMNzcLVI/AAAAAAAAJYw/yjOhPZIizBs/s1600-h/image14.png\"><img src=\"http://lh6.ggpht.com/-pGWduqJGuGo/U6SxMwQCDKI/AAAAAAAAJY4/JVNC2jXkVls/image_thumb8.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>然後選擇目錄。</p>\n<p><a href=\"http://lh3.ggpht.com/-hKBLfb0ywB4/U6SxN0CfodI/AAAAAAAAJZA/QSRXlzzqf60/s1600-h/image19.png\"><img src=\"http://lh4.ggpht.com/-Iyu12B2q_x8/U6SxOgDB3SI/AAAAAAAAJZI/PucmeRZXWfM/image_thumb11.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>完成後，其實可以發現，現在多了一個web.cmd這個檔案了；另外，大家可能會覺得…為啥有一堆MVC的Code…那是因為我們上一篇有把MVC的Source Code加入進來。</p>\n<p>當然，這個這樣是不安全的，但大家也不用擔心啦，離整個發表，還有一年的時間(2015年)，我們先體驗過程就好了~~</p>\n<p><a href=\"http://lh4.ggpht.com/-WRBTJQ8HOtk/U6SxPV_uy0I/AAAAAAAAJZQ/Xwmtv99hwU8/s1600-h/image24.png\"><img src=\"http://lh6.ggpht.com/-xmJkNyUd8_o/U6SxQZawkeI/AAAAAAAAJZY/NQcJHb0RN_I/image_thumb14.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>這時候，我們執行web.cmd，就可以得到如下圖的結果。</p>\n<p><a href=\"http://lh4.ggpht.com/-0KDSZYhVhhA/U6SxRV8KPYI/AAAAAAAAJZg/LmkSXb5Psfw/s1600-h/image33.png\"><img src=\"http://lh6.ggpht.com/-YSYJvX-e2zU/U6SxSqr3RJI/AAAAAAAAJZo/TYMVuhk4uqI/image_thumb19.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>另外，如果copy到另外一台電腦，也不用做甚麼事情，就可以順利run了 ( 我的筆電上是沒有裝KVM的，但也是一樣可以跑得很開心~~ )</p>\n<p><a href=\"http://lh3.ggpht.com/-PsUDzZ0QSH0/U6SxUFO2XJI/AAAAAAAAJZw/L5bVDH-1XXg/s1600-h/image38.png\"><img src=\"http://lh4.ggpht.com/-KASl8dNAHRQ/U6SxVuVZpQI/AAAAAAAAJZ4/ObRHDLaBu_w/image_thumb22.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>當然，能RUN起來的秘密，其實就是他把所有需要的東西，全部都放到Package裡面去了。( 當然，要run的電腦上還是要裝.Net Framework啦…不然空有dll，沒有環境可以Run，當然還是不行；而這次透過這方式，可以讓Server端不用安裝一堆Package，而變成動態下載，也因此，我們不用再去找相對應的版本對應包，更加的方便了!!</p>\n<p><a href=\"http://lh5.ggpht.com/-cnWpXgHAl-8/U6SxXRvrTdI/AAAAAAAAJaA/mhzAsHYoNbQ/s1600-h/image51.png\"><img src=\"http://lh5.ggpht.com/-CUkw6XJW7Yg/U6SxYh06YII/AAAAAAAAJaI/9a45l9QbxtQ/image_thumb2.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>大致上就這樣!!以後網頁也可以帶著走了喔!!</p>","excerpt":"此回介紹ASP.NET MVC的一個重大功能，self host與publish。 從MVC 5開始，ASP.NET MVC就開始計畫與實作傳說中的OWIN，OWIN的全名就是Open Web Interface for .Net；我們思索一下，從以前開始，ASP.NET…"}},"pageContext":{"type":"posts","next":{"frontmatter":{"path":null,"title":"ASP.NET MVC - ASP.NET MVC vNext ( MVC 6 ) 參考其他專案","tags":["ASP.NET MVC","Visual Studio"]},"fields":{"slug":"/2014/06/10/ASP-NET-MVC-ASP-NET-MVC-vNext-MVC-6-參考其他專案/"},"fileAbsolutePath":"/home/runner/work/blog.sanc.idv.tw/blog.sanc.idv.tw/src/posts/blog.sanc.idv.tw/ASP-NET-MVC-ASP-NET-MVC-vNext-MVC-6-參考其他專案.md"},"previous":{"frontmatter":{"path":null,"title":"ASP.NET MVC -  ASP.NET MVC vNext ( MVC 6 ) Core CLR and .NET Core Framework","tags":["ASP.NET","ASP.NET MVC","Azure","C#","IIS","KVM"]},"fields":{"slug":"/2014/06/20/ASP-NET-MVC-ASP-NET-MVC-vNext-MVC-6-Core-CLR-and-NET-Core-Framework/"},"fileAbsolutePath":"/home/runner/work/blog.sanc.idv.tw/blog.sanc.idv.tw/src/posts/blog.sanc.idv.tw/ASP-NET-MVC-ASP-NET-MVC-vNext-MVC-6-Core-CLR-and-NET-Core-Framework.md"}}}}