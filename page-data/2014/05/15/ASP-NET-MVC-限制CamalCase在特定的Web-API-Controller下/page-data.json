{"componentChunkName":"component---src-templates-page-js","path":"/2014/05/15/ASP-NET-MVC-限制CamalCase在特定的Web-API-Controller下/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"ASP.NET MVC - 限制CamalCase在特定的Web API Controller下","date":"15 May 2014","author":"Sky Chang","excerpt":null,"tags":["ASP.NET MVC"],"coverImage":null},"id":"3af67e89-0b99-59a0-805c-eba9f03f3a82","html":"<p>這個月瘋狂加班中，其實已經沒啥力氣寫Blog了，但今天和好友神人<a href=\"http://blog.kkbruce.net/\">Bruce</a>討論到這個問題，感覺不順手記一下，就太對不起<a href=\"http://blog.kkbruce.net/\">Bruce</a>今天的討論了，所以這篇就獻給<a href=\"http://blog.kkbruce.net/\">Bruce</a>吧XDD。</p>\n<p>這個問題的情境大致上是這樣的，大家都知道Web API會透過JSON.NET來將物件序列化成JSON，而我們定義的C#物件，裡面的屬性名稱第一個字慣例上都會用大寫…但在JavaScript上，習慣第一個字為小寫…所以龜毛的小弟我，就會在WebApiConfig.cs或是Global.asax裡面去加上這串。(最底下的參考網址有官方連結 )</p>\n<pre class=\"brush: csharp;\">var json = GlobalConfiguration.Configuration.Formatters.JsonFormatter;\njson.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();\n</pre>\n<p>簡單的說，這段程式碼會告訴JSON.NET，若序列化的話，要把你讀到的C#物件裡面的屬性名稱的第一個單字，轉到JSON的時候，變成小寫喔…</p>\n<p>就如同 Name會變成name，UserOrder會變成userOrder.</p>\n<p>但現實上，一定不會那麼順利；如果是新的一個Case，那可以一開始的時候就可以這樣制定下來；但實際上，我相信有很多人是在舊的系統上運作，那加了上面的Code就會天下大亂了…</p>\n<p>原因很簡單，那是因為GlobalConfiguration嘛…一套用，就全域都套了…</p>\n<p>所以在真實環境中，比較好的做法，就是寫個attribute，來給Controller掛上，只要有掛的Controller都會自動轉第一個字母小寫，沒掛的就維持原本的大寫；這樣也大大的提升了彈性。</p>\n<p>那怎麼做呢?.就是下面這段程式碼啦!~內容也滿簡單的，反正就是找出舊的，移除後，在放上新的規則~~ ( 感謝Bruce補充，這邊不要用add.要改用insert，不然會擾亂JSON和XML返回的優先順序~ 詳細內容可以參考底下相關連結，有Bruce針對此撰寫的文章~)</p>\n<pre class=\"brush: csharp;\">public class CamelCasedJsonAttribute : Attribute, IControllerConfiguration\n{\n    public void Initialize(HttpControllerSettings controllerSettings, HttpControllerDescriptor controllerDescriptor)\n    {\n        var formatter = controllerSettings.Formatters.JsonFormatter;\n        controllerSettings.Formatters.Remove(formatter);\n\n        formatter = new JsonMediaTypeFormatter\n        {\n            SerializerSettings = { ContractResolver = new CamelCasePropertyNamesContractResolver() }\n        };\n\n        controllerSettings.Formatters.Insert(0,formatter);\n\n    }\n}\n</pre>\n<p>而Controller怎樣使用呢??只要掛上就好，簡單又有力!!</p>\n<pre class=\"brush: csharp;\">[CamelCasedJson]\npublic class HoneController : ApiController\n</pre>\n<p>這樣子後，就可以順利的解決了現實生活上的問題了!!~</p>\n<h4>後記</h4>\n<p>另外，也可以從Model的地方加上Attribute，來告訴Json.NET序列化後，要變成怎樣的Json屬性名稱，這也是一種方式；但是當然，懶惰的小弟，還是使用以上的方法吧=v=.</p>\n<h4>參考網址</h4>\n<ul>\n<li>\n<p><a href=\"http://www.asp.net/web-api/overview/formats-and-model-binding/json-and-xml-serialization\" title=\"http://www.asp.net/web-api/overview/formats-and-model-binding/json-and-xml-serialization\">http://www.asp.net/web-api/overview/formats-and-model-binding/json-and-xml-serialization</a><li><a href=\"http://stackoverflow.com/questions/19956838/force-camalcase-on-asp-net-webapi-per-controller\" title=\"http://stackoverflow.com/questions/19956838/force-camalcase-on-asp-net-webapi-per-controller\">http://stackoverflow.com/questions/19956838/force-camalcase-on-asp-net-webapi-per-controller</a></p>\n<li>[http://blog.kkbruce.net/2014/05/apicontroller-level-configuration-in-webapi2.html#.U3RYIPmSx08](http://blog.kkbruce.net/2014/05/apicontroller-level-configuration-in-webapi2.html#.U3RYIPmSx08 \"http://blog.kkbruce.net/2014/05/apicontroller-level-configuration-in-webapi2.html#.U3RYIPmSx08\")\n</li>\n</ul>","excerpt":"這個月瘋狂加班中，其實已經沒啥力氣寫Blog了，但今天和好友神人Bruce討論到這個問題，感覺不順手記一下，就太對不起Bruce今天的討論了，所以這篇就獻給Bruce吧XDD。 這個問題的情境大致上是這樣的，大家都知道Web API會透過JSON.NET來將物件序列化成JSON…"}},"pageContext":{"type":"posts","next":{"frontmatter":{"path":null,"title":"Azure - 實作Azure上的AD與MVC進行驗證 - Azure設定篇 ( 一 )","tags":["Active Directory","ASP.NET MVC","Azure","Entity Framework"]},"fields":{"slug":"/2014/05/12/Azure-實作Azure上的AD與MVC進行驗證-Azure設定篇-一/"},"fileAbsolutePath":"/home/runner/work/blog.sanc.idv.tw/blog.sanc.idv.tw/src/posts/blog.sanc.idv.tw/Azure-實作Azure上的AD與MVC進行驗證-Azure設定篇-一.md"},"previous":{"frontmatter":{"path":null,"title":"AngularJS -  AngularJS 與 UI-Bootstrap Scope的陷阱","tags":["AngularJS","JavaScript"]},"fields":{"slug":"/2014/05/17/AngularJS-AngularJS-與-UI-Bootstrap-Scope的陷阱/"},"fileAbsolutePath":"/home/runner/work/blog.sanc.idv.tw/blog.sanc.idv.tw/src/posts/blog.sanc.idv.tw/AngularJS-AngularJS-與-UI-Bootstrap-Scope的陷阱.md"}}}}