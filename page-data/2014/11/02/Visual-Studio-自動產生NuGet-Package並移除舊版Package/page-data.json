{"componentChunkName":"component---src-templates-page-js","path":"/2014/11/02/Visual-Studio-自動產生NuGet-Package並移除舊版Package/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Visual Studio - 自動產生NuGet Package並移除舊版Package","date":"02 November 2014","author":"Sky Chang","excerpt":null,"tags":["NuGet","Visual Studio"],"coverImage":null},"id":"f284a914-cf03-5674-a247-9a707c0bd211","html":"<p><a href=\"http://blog.sanc.idv.tw/2014/11/visual-studio-nuspecnuget-package.html\">延續前一篇</a>，這篇要談的是一個小小的不方便與問題，畢竟人類的懶惰是沒有極限的。</p>\n<p>如果大家有測是下來，可能就會發現如下圖的問題，是的，產生了非常多的nupkg檔案…畢竟每次增加一個版本，就會多兩個nupkg檔案如下圖；當然如果一開始少少的可能還好，但越來越多的時候，就會感覺很髒亂…，所以這篇，我們就來看看如何建立的過程中，順便移除舊版的Package。</p>\n<p><a href=\"http://lh6.ggpht.com/-Ok4AlfodWnc/VFXd_oQKscI/AAAAAAAAKQs/tgZ2Zz-ABHA/s1600-h/image%25255B4%25255D.png\"><img src=\"http://lh4.ggpht.com/-3CqJj1EUHdU/VFXeAp-IcfI/AAAAAAAAKQ0/XpQoXfyJF_E/image_thumb%25255B2%25255D.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>那要怎麼做呢??，其實每次建立的時候，都是透過NuGet.targets來觸發動作，所以我們要增加一些小東西到NuGet.targets裡面去。</p>\n<p><a href=\"http://lh6.ggpht.com/-DKGXkMEtNwg/VFXeBW0De4I/AAAAAAAAKQ8/6Cmh2dwLCVI/s1600-h/image%25255B34%25255D.png\"><img src=\"http://lh3.ggpht.com/-sMxN_8MNrrI/VFXeCc0gLXI/AAAAAAAAKRE/h0NXgDNpLhU/image_thumb%25255B20%25255D.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>首先，我們要先在前面填入以下的Code，這邊我們定義了OutputPackages的內容，是nupkg的路徑。</p>\n<pre class=\"brush: xml;\">&lt;ItemGroup&gt;\n    &lt;OutputPackages Include=\"$(TargetDir)*.nupkg\" /&gt;\n&lt;/ItemGroup&gt;  \n</pre>\n<p>將此Code放到下圖的位置。</p>\n<p><a href=\"http://lh3.ggpht.com/-xX1nLqd4b3c/VFXeDKq90cI/AAAAAAAAKRM/2kXPRnJ_MlQ/s1600-h/image%25255B38%25255D.png\"><img src=\"http://lh3.ggpht.com/-_XZ0ZlaQvrM/VFXeD-SKKfI/AAAAAAAAKRU/T8hJPyGUE5I/image_thumb%25255B21%25255D.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>接下來，我們要定義一個CleanDependsOn的標籤，當條件成立的時候，就會執行此標籤裡面的內容。</p>\n<pre class=\"brush: xml;\">&lt;CleanDependsOn Condition=\"$(BuildPackage) == 'true'\"&gt;\n  $(CleanDependsOn);\n  CleanPackages;\n&lt;/CleanDependsOn&gt;\n</pre>\n<p>我們要把此標籤放到底下的位置。</p>\n<p><a href=\"http://lh3.ggpht.com/-COMElm6ZDZA/VFXeE0_-YvI/AAAAAAAAKRc/bH0v3ALfx_k/s1600-h/image%25255B42%25255D.png\"><img src=\"http://lh3.ggpht.com/-9I0u1XLDzJY/VFXeF2lmWAI/AAAAAAAAKRk/FTzz7I86hAw/image_thumb%25255B22%25255D.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>最後，這個內容到底要做甚麼事情哩，就是最後面這個標籤的內容了，也就是Delete Files，要刪除的檔案，就是我們一開始定義的路徑。</p>\n<pre class=\"brush: xml;\">&lt;Target Name=\"CleanPackages\"&gt;\n  &lt;Delete Files=\"@(OutputPackages)\"&gt;&lt;/Delete&gt;\n&lt;/Target&gt;\n</pre>\n<p>我們把此標籤放到以下的位置。</p>\n<p><a href=\"http://lh5.ggpht.com/-GTfy4vmD2bg/VFXeGQhKm6I/AAAAAAAAKRo/bqo9R3Ql6EI/s1600-h/image%25255B46%25255D.png\"><img src=\"http://lh6.ggpht.com/-28m7r-Ab9mY/VFXeHs-mh2I/AAAAAAAAKR0/rTPWABbs_0s/image_thumb%25255B23%25255D.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>完成之後，我們要使用<font color=\"#ff0000\">重建的動作</font>，如果只用建置，是沒辦法觸發的。</p>\n<p><a href=\"http://lh3.ggpht.com/-RnKyb16nnjI/VFXeIre7jLI/AAAAAAAAKR8/Ov9C9wcNICk/s1600-h/image%25255B25%25255D.png\"><img src=\"http://lh6.ggpht.com/-NG2tRgSW4fM/VFXeJ2qhhrI/AAAAAAAAKSE/WG9qiSzO0QI/image_thumb%25255B15%25255D.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>重建之後，我們就可以發現，原本的nupkg檔案全部都被砍掉了，只留下最新版喔!!</p>\n<p><a href=\"http://lh5.ggpht.com/-7JbcLJaM56A/VFXeKm9tBuI/AAAAAAAAKSM/wcTOPCymLk8/s1600-h/image%25255B30%25255D.png\"><img src=\"http://lh6.ggpht.com/-xtaVG3S8DNU/VFXeLRCLwhI/AAAAAAAAKSU/-Kkda4a9QoA/image_thumb%25255B18%25255D.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>最後的最後，附上完整的NuGet.targets xml給大家參考~</p>\n<pre class=\"brush: xml;\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"&gt;\n  &lt;ItemGroup&gt;\n    &lt;OutputPackages Include=\"$(TargetDir)*.nupkg\" /&gt;\n  &lt;/ItemGroup&gt;  \n  &lt;PropertyGroup&gt;\n        &lt;SolutionDir Condition=\"$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*'\"&gt;$(MSBuildProjectDirectory)\\..\\&lt;/SolutionDir&gt;\n\n        &lt;!-- Enable the restore command to run before builds --&gt;\n        &lt;RestorePackages Condition=\"  '$(RestorePackages)' == '' \"&gt;false&lt;/RestorePackages&gt;\n\n        &lt;!-- Property that enables building a package from a project --&gt;\n        &lt;BuildPackage Condition=\" '$(BuildPackage)' == '' \"&gt;false&lt;/BuildPackage&gt;\n\n        &lt;!-- Determines if package restore consent is required to restore packages --&gt;\n        &lt;RequireRestoreConsent Condition=\" '$(RequireRestoreConsent)' != 'false' \"&gt;true&lt;/RequireRestoreConsent&gt;\n\n        &lt;!-- Download NuGet.exe if it does not already exist --&gt;\n        &lt;DownloadNuGetExe Condition=\" '$(DownloadNuGetExe)' == '' \"&gt;false&lt;/DownloadNuGetExe&gt;\n    &lt;/PropertyGroup&gt;\n\n    &lt;ItemGroup Condition=\" '$(PackageSources)' == '' \"&gt;\n        &lt;!-- Package sources used to restore packages. By default, registered sources under %APPDATA%\\NuGet\\NuGet.Config will be used --&gt;\n        &lt;!-- The official NuGet package source (https://www.nuget.org/api/v2/) will be excluded if package sources are specified and it does not appear in the list --&gt;\n        &lt;!--\n            &lt;PackageSource Include=\"https://www.nuget.org/api/v2/\" /&gt;\n            &lt;PackageSource Include=\"https://my-nuget-source/nuget/\" /&gt;\n        --&gt;\n    &lt;/ItemGroup&gt;\n\n    &lt;PropertyGroup Condition=\" '$(OS)' == 'Windows_NT'\"&gt;\n        &lt;!-- Windows specific commands --&gt;\n        &lt;NuGetToolsPath&gt;$([System.IO.Path]::Combine($(SolutionDir), \".nuget\"))&lt;/NuGetToolsPath&gt;\n    &lt;/PropertyGroup&gt;\n\n    &lt;PropertyGroup Condition=\" '$(OS)' != 'Windows_NT'\"&gt;\n        &lt;!-- We need to launch nuget.exe with the mono command if we're not on windows --&gt;\n        &lt;NuGetToolsPath&gt;$(SolutionDir).nuget&lt;/NuGetToolsPath&gt;\n    &lt;/PropertyGroup&gt;\n\n    &lt;PropertyGroup&gt;\n        &lt;PackagesProjectConfig Condition=\" '$(OS)' == 'Windows_NT'\"&gt;$(MSBuildProjectDirectory)\\packages.$(MSBuildProjectName.Replace(' ', '_')).config&lt;/PackagesProjectConfig&gt;\n        &lt;PackagesProjectConfig Condition=\" '$(OS)' != 'Windows_NT'\"&gt;$(MSBuildProjectDirectory)\\packages.$(MSBuildProjectName).config&lt;/PackagesProjectConfig&gt;\n    &lt;/PropertyGroup&gt;\n\n    &lt;PropertyGroup&gt;\n      &lt;PackagesConfig Condition=\"Exists('$(MSBuildProjectDirectory)\\packages.config')\"&gt;$(MSBuildProjectDirectory)\\packages.config&lt;/PackagesConfig&gt;\n      &lt;PackagesConfig Condition=\"Exists('$(PackagesProjectConfig)')\"&gt;$(PackagesProjectConfig)&lt;/PackagesConfig&gt;\n    &lt;/PropertyGroup&gt;\n\n    &lt;PropertyGroup&gt;\n        &lt;!-- NuGet command --&gt;\n        &lt;NuGetExePath Condition=\" '$(NuGetExePath)' == '' \"&gt;$(NuGetToolsPath)\\NuGet.exe&lt;/NuGetExePath&gt;\n        &lt;PackageSources Condition=\" $(PackageSources) == '' \"&gt;@(PackageSource)&lt;/PackageSources&gt;\n\n        &lt;NuGetCommand Condition=\" '$(OS)' == 'Windows_NT'\"&gt;\"$(NuGetExePath)\"&lt;/NuGetCommand&gt;\n        &lt;NuGetCommand Condition=\" '$(OS)' != 'Windows_NT' \"&gt;mono --runtime=v4.0.30319 \"$(NuGetExePath)\"&lt;/NuGetCommand&gt;\n\n        &lt;PackageOutputDir Condition=\"$(PackageOutputDir) == ''\"&gt;$(TargetDir.Trim('\\\\'))&lt;/PackageOutputDir&gt;\n\n        &lt;RequireConsentSwitch Condition=\" $(RequireRestoreConsent) == 'true' \"&gt;-RequireConsent&lt;/RequireConsentSwitch&gt;\n        &lt;NonInteractiveSwitch Condition=\" '$(VisualStudioVersion)' != '' AND '$(OS)' == 'Windows_NT' \"&gt;-NonInteractive&lt;/NonInteractiveSwitch&gt;\n\n        &lt;PaddedSolutionDir Condition=\" '$(OS)' == 'Windows_NT'\"&gt;\"$(SolutionDir) \"&lt;/PaddedSolutionDir&gt;\n        &lt;PaddedSolutionDir Condition=\" '$(OS)' != 'Windows_NT' \"&gt;\"$(SolutionDir)\"&lt;/PaddedSolutionDir&gt;\n\n        &lt;!-- Commands --&gt;\n        &lt;RestoreCommand&gt;$(NuGetCommand) install \"$(PackagesConfig)\" -source \"$(PackageSources)\"  $(NonInteractiveSwitch) $(RequireConsentSwitch) -solutionDir $(PaddedSolutionDir)&lt;/RestoreCommand&gt;\n        &lt;BuildCommand&gt;$(NuGetCommand) pack \"$(ProjectPath)\" -Properties \"Configuration=$(Configuration);Platform=$(Platform)\" $(NonInteractiveSwitch) -OutputDirectory \"$(PackageOutputDir)\" -symbols&lt;/BuildCommand&gt;\n\n        &lt;!-- We need to ensure packages are restored prior to assembly resolve --&gt;\n        &lt;BuildDependsOn Condition=\"$(RestorePackages) == 'true'\"&gt;\n            RestorePackages;\n            $(BuildDependsOn);\n        &lt;/BuildDependsOn&gt;\n\n        &lt;!-- Make the build depend on restore packages --&gt;\n        &lt;BuildDependsOn Condition=\"$(BuildPackage) == 'true'\"&gt;\n            $(BuildDependsOn);\n            BuildPackage;\n        &lt;/BuildDependsOn&gt;\n\n        &lt;CleanDependsOn Condition=\"$(BuildPackage) == 'true'\"&gt;\n          $(CleanDependsOn);\n          CleanPackages;\n        &lt;/CleanDependsOn&gt;\n    &lt;/PropertyGroup&gt;\n\n    &lt;Target Name=\"CheckPrerequisites\"&gt;\n        &lt;!-- Raise an error if we're unable to locate nuget.exe  --&gt;\n        &lt;Error Condition=\"'$(DownloadNuGetExe)' != 'true' AND !Exists('$(NuGetExePath)')\" Text=\"Unable to locate '$(NuGetExePath)'\" /&gt;\n        &lt;!--\n        Take advantage of MsBuild's build dependency tracking to make sure that we only ever download nuget.exe once.\n        This effectively acts as a lock that makes sure that the download operation will only happen once and all\n        parallel builds will have to wait for it to complete.\n        --&gt;\n        &lt;MsBuild Targets=\"_DownloadNuGet\" Projects=\"$(MSBuildThisFileFullPath)\" Properties=\"Configuration=NOT_IMPORTANT;DownloadNuGetExe=$(DownloadNuGetExe)\" /&gt;\n    &lt;/Target&gt;\n\n    &lt;Target Name=\"_DownloadNuGet\"&gt;\n        &lt;DownloadNuGet OutputFilename=\"$(NuGetExePath)\" Condition=\" '$(DownloadNuGetExe)' == 'true' AND !Exists('$(NuGetExePath)')\" /&gt;\n    &lt;/Target&gt;\n\n    &lt;Target Name=\"RestorePackages\" DependsOnTargets=\"CheckPrerequisites\"&gt;        \n        &lt;Exec Command=\"$(RestoreCommand)\"\n              Condition=\"'$(OS)' != 'Windows_NT' And Exists('$(PackagesConfig)')\" /&gt;\n\n        &lt;Exec Command=\"$(RestoreCommand)\"\n              LogStandardErrorAsError=\"true\"\n              Condition=\"'$(OS)' == 'Windows_NT' And Exists('$(PackagesConfig)')\" /&gt;\n    &lt;/Target&gt;\n\n    &lt;Target Name=\"BuildPackage\" DependsOnTargets=\"CheckPrerequisites\"&gt;\n        &lt;Exec Command=\"$(BuildCommand)\"\n              Condition=\" '$(OS)' != 'Windows_NT' \" /&gt;\n\n        &lt;Exec Command=\"$(BuildCommand)\"\n              LogStandardErrorAsError=\"true\"\n              Condition=\" '$(OS)' == 'Windows_NT' \" /&gt;\n    &lt;/Target&gt;\n\n    &lt;Target Name=\"CleanPackages\"&gt;\n      &lt;Delete Files=\"@(OutputPackages)\"&gt;&lt;/Delete&gt;\n    &lt;/Target&gt;\n\n    &lt;UsingTask TaskName=\"DownloadNuGet\" TaskFactory=\"CodeTaskFactory\" AssemblyFile=\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.v4.0.dll\"&gt;\n        &lt;ParameterGroup&gt;\n            &lt;OutputFilename ParameterType=\"System.String\" Required=\"true\" /&gt;\n        &lt;/ParameterGroup&gt;\n        &lt;Task&gt;\n            &lt;Reference Include=\"System.Core\" /&gt;\n            &lt;Using Namespace=\"System\" /&gt;\n            &lt;Using Namespace=\"System.IO\" /&gt;\n            &lt;Using Namespace=\"System.Net\" /&gt;\n            &lt;Using Namespace=\"Microsoft.Build.Framework\" /&gt;\n            &lt;Using Namespace=\"Microsoft.Build.Utilities\" /&gt;\n            &lt;Code Type=\"Fragment\" Language=\"cs\"&gt;\n                &lt;![CDATA[\n                try {\n                    OutputFilename = Path.GetFullPath(OutputFilename);\n\n                    Log.LogMessage(\"Downloading latest version of NuGet.exe...\");\n                    WebClient webClient = new WebClient();\n                    webClient.DownloadFile(\"https://www.nuget.org/nuget.exe\", OutputFilename);\n\n                    return true;\n                }\n                catch (Exception ex) {\n                    Log.LogErrorFromException(ex);\n                    return false;\n                }\n            ]]&gt;\n            &lt;/Code&gt;\n        &lt;/Task&gt;\n    &lt;/UsingTask&gt;\n&lt;/Project&gt;\n\n</pre>\n<p>基本上，到這邊，就完成嚕!!</p>\n<h4>參考資料</h4>\n<ul>\n<li><a href=\"http://ihadthisideaonce.com/2014/02/24/nuget-like-a-pro-the-msbuild-way/\" title=\"http://ihadthisideaonce.com/2014/02/24/nuget-like-a-pro-the-msbuild-way/\">http://ihadthisideaonce.com/2014/02/24/nuget-like-a-pro-the-msbuild-way/</a></li>\n</ul>","excerpt":"延續前一篇，這篇要談的是一個小小的不方便與問題，畢竟人類的懶惰是沒有極限的。 如果大家有測是下來，可能就會發現如下圖的問題，是的，產生了非常多的nupkg檔案…畢竟每次增加一個版本，就會多兩個nupkg…"}},"pageContext":{"type":"posts","next":{"frontmatter":{"path":null,"title":"Visual Studio - 使用Nuspec來自動產生NuGet Package","tags":["NuGet","Visual Studio"]},"fields":{"slug":"/2014/11/02/Visual-Studio-使用Nuspec來自動產生NuGet-Package/"},"fileAbsolutePath":"/home/runner/work/blog.sanc.idv.tw/blog.sanc.idv.tw/src/posts/blog.sanc.idv.tw/Visual-Studio-使用Nuspec來自動產生NuGet-Package.md"},"previous":{"frontmatter":{"path":null,"title":"JavaScript -  使用gulp來建置JS","tags":["Gulp","JavaScript","Visual Studio"]},"fields":{"slug":"/2014/11/02/JavaScript-使用gulp來建置JS/"},"fileAbsolutePath":"/home/runner/work/blog.sanc.idv.tw/blog.sanc.idv.tw/src/posts/blog.sanc.idv.tw/JavaScript-使用gulp來建置JS.md"}}}}