{"componentChunkName":"component---src-templates-page-js","path":"/2011/10/31/Windows-Azure-儲存體–Blob/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Windows Azure 儲存體–Blob","date":"31 October 2011","author":"Sky Chang","excerpt":null,"tags":["ASP.NET","Azure"],"coverImage":null},"id":"d7ea2687-8f22-5f52-b717-9ae3f0a8c219","html":"<p>在Desktop的環境裡面有硬碟可以用來儲存照片、影片、MP3等等，那Windows Azure當然也要儲存體來進行儲存啦，所以這次介紹的是Windows Azure專門用來存取大型資料的儲存體Blob(Binary Large Object)，而在談論之前，也有一個觀念要給大家，無論是Blob或是Table、Queue，其實都是存在於資料庫裏面，所以本機要模擬的時候，也必須要有資料庫才能進行測試喔!</p>\n<h4>Blob架構</h4>\n<p>既然Blob是儲存在雲端上，就必須符合雲端的特性，所以架構必定和本機上有所不同，以下是Blob的結構圖，我們可以看到，基本上會分成三層，Account(帳號)、Container(容器)、Blob；畢竟網路那麼多使用者，所以一定是用Account來做區分，而一個Account會有非常多的Container，這些Container是可以自己去自訂的，Container的目的其實就像是利用群組的方式，來設定存取的權限，而Container裡面會有許多Blob，基本上就如下圖。( 其實Container也是物件，官方網站也稱Container為Blob Container )，此外，除了下圖外，Container和Blob還擁有Metadata可以進行描述。</p>\n<p><a href=\"http://lh4.ggpht.com/-mGrWbX9bn7o/Tq9qj8WFTDI/AAAAAAAAA10/SAjCv6gVPCo/s1600-h/image4.png\"><img src=\"http://lh3.ggpht.com/-BvJGgxdBrr4/Tq9qkvvpBkI/AAAAAAAAA18/1WabQSTNX_Y/image_thumb2.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<h5>Storage Account</h5>\n<ul>\n<li>所有的Blob是透過此帳號進行存取。  <li>他是整個架構的起點。  <li>一個帳號可以有非常多的Container。 </li>\n</ul>\n<h5>Blog Container</h5>\n<ul>\n<li>此Container必須在Account內，且此Container幫Blob分了群組。  <li>共享權限的等級，是設在Container裡面，目前支援Public Read和Private，當此權限為Public Read時，任何人都可以進行讀取，而不需要驗證，只有驗證過的對應使用者能進行存取。  <li>容器也有Metadata，大小為8k，是一組&#x3C;name,value>的形式。  <li>Blob Containet擁有可以列出所有Blob的方法，所以可以很輕鬆地去做存取。 </li>\n</ul>\n<p>Blob</p>\n<ul>\n<li>Blob儲存在Container裡面，而且每個Blob最高可儲存50G!  <li>每個在Container裡面的Blob都有一個獨一無二的字串名稱。  <li>Blob也擁有Metadata可以設定，一樣是8k，也是一組&#x3C;name,value>的形式。 </li>\n</ul>\n<p>最後，如上圖，因為是雲端儲存體，所以如果我們要取得Blob，可想而知，就一定是使用url來當作識別的位置啦!如下。</p>\n<p><a href=\"http://%3Caccount%3E.blob.core.windows.net/%3Ccontainer%3E/%3Cblobname%3C\">http://&#x3C;account>.blob.core.windows.net/&#x3C;container>/&#x3C;blobname></a>;</p>\n<h4>來寫程式吧!</h4>\n<p>接下來，我們就來撰寫程式看看吧，我相信大家應該也沒有那麼多的錢可以租用Windows Azure服務，老實說，小弟我也沒那麼多錢，所以我的範例都是在本機上面做測試。</p>\n<p>首先，要寫Windows Azure，必須先裝SDK，如果還沒裝的可以<a href=\"http://blog.sanc.idv.tw/2011/09/windows-azure.html\">參考這篇</a>。接下來就在Visual Studio裡面選擇Windows Azure專案。</p>\n<p><a href=\"http://lh6.ggpht.com/-NkTumZKYiYI/Tq9qlbg9nuI/AAAAAAAAA2E/HHd1UuCFAOo/s1600-h/image9.png\"><img src=\"http://lh6.ggpht.com/-MGUCj2NP4lU/Tq9qmFP23FI/AAAAAAAAA2M/2X_GEeeDL7A/image_thumb5.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>到這邊，就可以選擇Web Role，但小弟我不喜歡在這邊選擇，會利用後續再增加的做法，有興趣的可以<a href=\"http://blog.sanc.idv.tw/2011/10/windows-azure-web-role.html\">參考這篇</a>，如果只想要簡單Demo，也可以直接在這邊選擇ASP.NET Web Role ( 中文翻角色 )。</p>\n<p><a href=\"http://lh6.ggpht.com/-Z70xZb2oW8Q/Tq9qm_Xvw0I/AAAAAAAAA2Q/6uEXldenDIg/s1600-h/image30.png\"><img src=\"http://lh6.ggpht.com/-6p4DsMv3V7U/Tq9qnlXwkXI/AAAAAAAAA2c/T8aqSOLCPp4/image_thumb16.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>接下來，我們先來看看最後寫完的範例程式執行起來的樣子吧；基本上就是長這樣，這隻程式的主要功能是可以上傳照片，並且可以刪除照片，如果有照片的話，可以從DropDownList可以看到檔名，並且於無資料那邊那個區塊，顯示所有雲端上的照片，這個範例也是Ruddy老師所說的，最經典且簡單的Blob範例，所以小弟我也造樣畫葫蘆，寫了此程式，並用此程式和大家解說。</p>\n<p><a href=\"http://lh6.ggpht.com/-w-KJp4rZyTY/Tq9qoXOFwuI/AAAAAAAAA2k/FANP4rZY4rM/s1600-h/image%25255B5%25255D.png\"><img src=\"http://lh5.ggpht.com/-Jo9AJRgj0EQ/Tq9qpPp1ECI/AAAAAAAAA2o/4tzqYjMwVA0/image_thumb%25255B2%25255D.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>首先我們先來看看HTML這邊的程式碼，基本就是很基本的ASP.NET。</p>\n<pre class=\"brush: xml;\">&lt;%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeBehind=\"BlobTest.aspx.cs\" Inherits=\"WebRole1.BlobTest\" %&gt;\n\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n&lt;head id=\"Head1\" runat=\"server\"&gt;\n    &lt;title&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=\"form1\" runat=\"server\"&gt;\n    &lt;div&gt;\n\n        &lt;asp:FileUpload ID=\"uploadImage\" runat=server /&gt;\n        &lt;asp:Button ID=\"uploadBtn\" runat=\"server\" Text=\"上傳\" onclick=\"uploadBtn_Click\" /&gt;\n\n        &lt;asp:DropDownList ID=\"imageList\" runat=\"server\" AutoPostBack=\"true\"&gt;&lt;/asp:DropDownList&gt;\n        &lt;asp:Button ID=\"delBtn\" runat=\"server\" Text=\"刪除\" onclick=\"delBtn_Click\" /&gt;\n\n        &lt;asp:ListView ID=\"imageView\" runat=\"server\"&gt;\n            &lt;LayoutTemplate&gt;\n                &lt;asp:PlaceHolder ID=\"itemPlaceHolder\" runat=\"server\" /&gt;\n            &lt;/LayoutTemplate&gt;\n            &lt;EmptyDataTemplate&gt;\n                &lt;h2&gt;無資料&lt;/h2&gt;\n            &lt;/EmptyDataTemplate&gt;\n            &lt;ItemTemplate&gt;\n                &lt;!--\n                Eval：Eval是用於單向資料繫結，資料是唯讀的顯示。\n                Bind：Bind則是雙向的資料繫當，不但能讀取資料，\n                更具有Insert、Update、Delete功能，所以若您需要編輯更新、新增與刪除功能使用本方法。\n                語法如下。\n                --&gt;\n                &lt;img src=\"&lt;%# Eval(\"Uri\") %&gt;\" alt=\"&lt;%# Eval(\"Uri\") %&gt;\" style=\"float:left\" /&gt;\n            &lt;/ItemTemplate&gt;\n        &lt;/asp:ListView&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>為了大家方便，我也做了一張對應圖給大家看。</p>\n<p><a href=\"http://lh5.ggpht.com/-Pbbsg6xu6W4/Tq9qp8WuvUI/AAAAAAAAA2w/THxHlGdG-X8/s1600-h/Image.png\"><img src=\"http://lh4.ggpht.com/-Pd0cfTD09Kw/Tq9qqbWPj2I/AAAAAAAAA20/HRKa3K3ZOBI/Image.png?imgmax=800\" alt=\"圖片 1\" title=\"圖片 1\"></a></p>\n<p>接下來，我們開始撰寫這個BlobTest.aspx.cs吧( 此ASP.NET的程式名稱為BlobTest.aspx )，首先，既然要存取雲端的Blob，我們當然要先準備一下，存取的方法；首先，我們定義一個GetContainer的方法，來取得CloudBlobContainer，這樣後續就可以利用此方法來取得Container底下的Blob了；就如前面說的，任何的Container都是在Account之下，所以我們第一步，就是先取得Account，因為我們是在本機上模擬與測試，所以我們可以使用CloudStorageAccount這個靜態類別的DevelopmentStorageAccount這個靜態方法來取得開發用的Account；有了Account，就可以利用Account來取得Client來進行後續的處理，最後，我們就可以利用Client來取得Container ( 這個Container的名稱就是myContainer )；到這邊還滿容易理解的，但是有人可能會有疑問，明明沒看到建立mycontainer這個Container的程式碼阿?沒錯，如果第一次執行的時候，到這邊的確還沒有在資料庫裡建立起mycontainer這個Container，我們只是利用client的GetContainerReference(“mycontainer”)這個方法來取得CloudBlobContainer這個物件，並且設定CloudBlobContainer裡面的Name屬性為mycontainer，後續我們才會於資料庫建立Container。</p>\n<pre class=\"brush: csharp;\">//取得Container\nprivate CloudBlobContainer GetContainer()\n{\n    //取得Developer用的Storage Account。\n    CloudStorageAccount account = CloudStorageAccount.DevelopmentStorageAccount;\n    //取得Storage的Client\n    CloudBlobClient client = account.CreateCloudBlobClient();\n    //取得Container關聯。\n    return client.GetContainerReference(\"mycontainer\");\n}\n</pre>\n<p>有了取得Container這個方法，接下來，我們就來實際撰寫建立容器的方法，第一行滿簡單的，就是取回CloudBlobContainer這個容器，而第二行，我們就利用取得回來的CloudBlobContainer物件來建立一個Container，CreateIfNotExist()，這個方法很好玩，如果目前資料庫裡面已經有了名為mycontainer的這個容器，他就不會再建立了，如果沒有，就會在資料庫裏面建立一個。</p>\n<pre class=\"brush: csharp;\">//建立容器\nprivate void CreateContainerExists()\n{\n    CloudBlobContainer container = this.GetContainer();\n    //假如沒有這個Container，就建立一個。\n    container.CreateIfNotExist();\n}\n</pre>\n<p>我們可以看到，如果程式執行到這邊，就會建立了一個mycontainer這個container。</p>\n<p>( 這是一個很好用的Azure Storage 瀏覽工具 )</p>\n<p><a href=\"http://lh4.ggpht.com/-qpnLIDCvteI/Tq9qq5vdh1I/AAAAAAAAA3E/BA1IZSGmCcQ/s1600-h/image%25255B10%25255D.png\"><img src=\"http://lh6.ggpht.com/-EHVMjwCZWf0/Tq9qr4_PX2I/AAAAAAAAA3M/b5imFw4PBxw/image_thumb%25255B5%25255D.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>完成了存取後，我們來處理一下刷新Image這個方法，這個方法的用處是，當有上傳，或是刪除動作的時候，可以呼叫這個方法來重新刷新頁面上的控制項，詳細可以看程式碼的註解。</p>\n<pre class=\"brush: csharp;\">//刷新Image\nprivate void RefreshImage()\n{\n    //ListBlobs可以取回此Container所有的Blobs，而後面可以傳入BlobRequestOptions這個物件，\n    //這個物件可以設定，傳回來的條件。\n    //這邊條件設定的第一個是列出所有的Blob(UseFlatBlobListing = true)\n    //並且抓取所有的Blob對象 ( BlobListingDetails = BlobListingDetails.All )\n    imageView.DataSource = this.GetContainer().ListBlobs(new BlobRequestOptions() { UseFlatBlobListing = true, BlobListingDetails = BlobListingDetails.All });\n    imageView.DataBind();\n    //每次刷新時，也清除DropDownList內的資訊。\n    imageList.Items.Clear();\n    var blobList = this.GetContainer().ListBlobs();\n    foreach (var item in blobList)\n    {\n        //每個Blob都有一個Uri屬性，這裡是取得Blob的檔案名稱。\n        imageList.Items.Add(item.Uri.Segments[3].ToString());\n    }\n\n    //dropDownListItem其實是紀錄目前dropDownList選了哪一個item。\n    //這個變數是此類別的屬性，最後整體程式碼的時候會看到。\n    imageList.SelectedIndex = dropDownListItem;\n\n}\n</pre>\n<p>接下來，我們來撰寫存Image這個方法，這個方法會帶四個參數進來，第一個會傳入id，後續我們會利用Guid.NewGuid.ToString()來產生id，而第二個會傳入檔案名稱，第三個會傳入檔案的型態( image/jpeg )，第四個則是圖片binary的資料；程式碼的第一行，會使用GetBlobReference來取得Blob物件，這個方法和之前的GetContainerReference一樣，並不會馬上寫到資料庫，指示先將Blob物件準備好，後面的部分，就只是很簡單的設定檔案型態、定義MetaData，最後使用UploadByteArrary將資料寫到資料庫。</p>\n<pre class=\"brush: csharp;\">//存Image\nprivate void SaveImage(string id, string fileName, string contentType, byte[] data)\n{\n    //利用GetBlobReference來取得Blob，第一個參數會帶進檔案名稱，\n    //而此檔案名稱會化成Uri的一部分。\n    CloudBlob blob = this.GetContainer().GetBlobReference(fileName);\n    //檔案型態\n    blob.Properties.ContentType = contentType;\n\n    //定義MetaData\n    NameValueCollection metadata = new NameValueCollection();\n    metadata[\"Id\"] = id;\n    metadata[\"Filename\"] = fileName;\n\n    blob.Metadata.Add(metadata);\n    blob.UploadByteArray(data);\n}\n</pre>\n<p>最後我們要處理的就是刪除，刪除的原理很簡單，利用DropDownList所選取到的檔名去和娶回來的BlobList來比對，如果相同，就將此Blob移除。</p>\n<pre class=\"brush: csharp;\">//刪除\nprotected void delBtn_Click(object sender, EventArgs e)\n{\n    if (this.GetContainer() == null) return;\n\n    var blobList = this.GetContainer().ListBlobs();\n    foreach (var item in blobList)\n    {\n        string deleteImage = item.Uri.Segments[3].ToString();\n        //判斷DropDownList所選擇的item名稱和Blob名稱是否相同，\n        //相同就刪除。\n        if (deleteImage == imageList.SelectedValue)\n        {\n            //利用GetBlobReference來取得Blob\n            CloudBlob blob = this.GetContainer().GetBlobReference(item.Uri.ToString());\n            blob.DeleteIfExists();\n\n            //刪除完後刷新一下。\n            RefreshImage();\n            return;\n        }\n    }\n}\n</pre>\n<p>最後附上完整的程式碼。</p>\n<pre class=\"brush: csharp;\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\nusing System.Web.UI;\nusing System.Web.UI.WebControls;\n\nusing System.Net;\nusing System.Collections.Specialized;\nusing System.Configuration;\n\nusing Microsoft.WindowsAzure;\nusing Microsoft.WindowsAzure.StorageClient;\nusing Microsoft.WindowsAzure.ServiceRuntime;\n\nnamespace WebRole1\n{\n    public partial class BlobTest : System.Web.UI.Page\n    {\n        int dropDownListItem = 0;\n        protected void Page_Load(object sender, EventArgs e)\n        {\n            if (!IsPostBack)\n            {\n                //First\n                this.CreateContainerExists();\n                dropDownListItem = imageList.SelectedIndex;\n                this.RefreshImage();\n            }\n            else\n            {\n                dropDownListItem = imageList.SelectedIndex;\n                this.RefreshImage();\n            }\n        }\n\n        //上傳\n        protected void uploadBtn_Click(object sender, EventArgs e)\n        {\n            if (uploadImage.HasFile)\n            {\n                //SaveImage(string id, string fileName, string contentType, byte[] data)\n                this.SaveImage(Guid.NewGuid().ToString(), uploadImage.FileName, uploadImage.PostedFile.ContentType, uploadImage.FileBytes);\n                RefreshImage();\n            }\n        }\n\n        //取得Container\n        private CloudBlobContainer GetContainer()\n        {\n            //取得Developer用的Storage Account。\n            CloudStorageAccount account = CloudStorageAccount.DevelopmentStorageAccount;\n            //取得各種Storage的Client\n            CloudBlobClient client = account.CreateCloudBlobClient();\n            //取得Container。\n            return client.GetContainerReference(\"mycontainer\");\n        }\n\n        //確保容器存在\n        private void CreateContainerExists()\n        {\n            CloudBlobContainer container = this.GetContainer();\n            //假如沒有這個Container，就建立一個。\n            container.CreateIfNotExist();\n        }\n\n        //刷新Image\n        private void RefreshImage()\n        {\n            //ListBlobs可以取回此Container所有的Blobs，而後面可以傳入BlobRequestOptions這個物件，\n            //這個物件可以設定，傳回來的條件。\n            //這邊條件設定的第一個是列出所有的Blob(UseFlatBlobListing = true)\n            //並且抓取所有的Blob對象 ( BlobListingDetails = BlobListingDetails.All )\n            imageView.DataSource = this.GetContainer().ListBlobs(new BlobRequestOptions() { UseFlatBlobListing = true, BlobListingDetails = BlobListingDetails.All });\n            imageView.DataBind();\n            //每次刷新時，也清除DropDownList內的資訊。\n            imageList.Items.Clear();\n            var blobList = this.GetContainer().ListBlobs();\n            foreach (var item in blobList)\n            {\n                //每個Blob都有一個Uri屬性，這裡是取得Blob的檔案名稱。\n                imageList.Items.Add(item.Uri.Segments[3].ToString());\n            }\n\n            //dropDownListItem其實是紀錄目前dropDownList選了哪一個item。\n            //這個變數是此類別的屬性，最後整體程式碼的時候會看到。\n            imageList.SelectedIndex = dropDownListItem;\n\n        }\n\n        //存取Image\n        private void SaveImage(string id, string fileName, string contentType, byte[] data)\n        {\n            //利用GetBlobReference來取得Blob，第一個參數會帶進檔案名稱，\n            //而此檔案名稱會化成Uri的一部分。\n            CloudBlob blob = this.GetContainer().GetBlobReference(fileName);\n            //檔案型態\n            blob.Properties.ContentType = contentType;\n\n            //定義MetaData\n            NameValueCollection metadata = new NameValueCollection();\n            metadata[\"Id\"] = id;\n            metadata[\"Filename\"] = fileName;\n\n            blob.Metadata.Add(metadata);\n            blob.UploadByteArray(data);\n        }\n\n        //刪除\n        protected void delBtn_Click(object sender, EventArgs e)\n        {\n            if (this.GetContainer() == null) return;\n\n            var blobList = this.GetContainer().ListBlobs();\n            foreach (var item in blobList)\n            {\n                string deleteImage = item.Uri.Segments[3].ToString();\n                //判斷DropDownList所選擇的item名稱和Blob名稱是否相同，\n                //相同就刪除。\n                if (deleteImage == imageList.SelectedValue)\n                {\n                    //利用GetBlobReference來取得Blob\n                    CloudBlob blob = this.GetContainer().GetBlobReference(item.Uri.ToString());\n                    blob.DeleteIfExists();\n\n                    //刪除完後刷新一下。\n                    RefreshImage();\n                    return;\n                }\n            }\n        }\n    }\n}\n</pre>\n<p>其實，這就是Blob的範例應用，雖然看起來程式碼很長，但其實還滿簡單的。</p>\n<h4>參考資料</h4>\n<ul>\n<li><a href=\"http://www.microsoft.com/windowsazure/Whitepapers/BlobStorage/\" title=\"http://www.microsoft.com/windowsazure/Whitepapers/BlobStorage/\">http://www.microsoft.com/windowsazure/Whitepapers/BlobStorage/</a></li>\n</ul>","excerpt":"在Desktop的環境裡面有硬碟可以用來儲存照片、影片、MP3等等，那Windows Azure當然也要儲存體來進行儲存啦，所以這次介紹的是Windows Azure專門用來存取大型資料的儲存體Blob(Binary Large Object…"}},"pageContext":{"type":"posts","next":{"frontmatter":{"path":null,"title":"Windows Azure 新增空白Web Role的作法","tags":["ASP.NET","ASP.NET MVC","Azure","Visual Studio"]},"fields":{"slug":"/2011/10/31/Windows-Azure-新增空白Web-Role的作法/"},"fileAbsolutePath":"/home/runner/work/blog.sanc.idv.tw/blog.sanc.idv.tw/src/posts/blog.sanc.idv.tw/Windows-Azure-新增空白Web-Role的作法.md"},"previous":{"frontmatter":{"path":null,"title":"Windows Azure 儲存體–Table","tags":["ASP.NET","Azure"]},"fields":{"slug":"/2011/11/01/Windows-Azure-儲存體–Table/"},"fileAbsolutePath":"/home/runner/work/blog.sanc.idv.tw/blog.sanc.idv.tw/src/posts/blog.sanc.idv.tw/Windows-Azure-儲存體–Table.md"}}}}