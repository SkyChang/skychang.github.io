{"componentChunkName":"component---src-templates-page-js","path":"/2011/11/01/Windows-Azure-儲存體–Table/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Windows Azure 儲存體–Table","date":"01 November 2011","author":"Sky Chang","excerpt":null,"tags":["ASP.NET","Azure"],"coverImage":null},"id":"5c0e7a89-0f2f-5f3f-990c-4033f3585217","html":"<p><font color=\"#ff0000\">2012/11/06 更新 - 感謝Wifi哥的指教，修正了程式碼的錯誤，由原本的DataKeyNames=\"PartitionKey\"改成DataKeyNames=\"PartitionKey,RowKey\"。</font></p>\n<p>說到Table，大家就會直接聯想到DB的Table，而Windows Azure的其中一個儲存體也叫Table，雖然也叫Table，但和DB的Table不太同，Windows Azure的Table沒辦法像DB一樣，可以設定多個Table的關聯，當然也沒辦法自己去設定PK、FK等等這類似的東西，如果你真的要將資料庫搬移到Windows Azure，那你應該選擇的是SQL Azure ( SQL Server的雲端版本 )，而不是將原本的資料庫內容搬到Windows Azure喔!，這點要注意一下喔!接下來，我們開始介紹Table。</p>\n<h4>Table架構</h4>\n<p>如下圖，其實Azure的儲存體，都是由Account ( 帳號 ) 開始，而一個Account可以有多個Table，每個Table又會包含許多的Entity ( 實體 )，每個Entity會有許多的Properties( 屬性 )，其中每個Entity一定會有PartitionKey、RowKey、Timestamp這三個屬性。</p>\n<p><a href=\"http://lh3.ggpht.com/-07Kua-D4cFk/Tq-uSw1gP4I/AAAAAAAAA3U/rdSEiusQN84/s1600-h/image10.png\"><img src=\"http://lh5.ggpht.com/-0rp9YF9s3DQ/Tq-uTZsQu0I/AAAAAAAAA3c/Ggfwcx7YDUg/image_thumb6.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>這裡，我們針對剛剛上面看到的一堆名詞，做個解釋。</p>\n<ul>\n<li>Storage Account - 所有的Table都是透過此帳號進行存取，他也是整個架構的起點，一個帳號可以有非常多的Table。  <li>Table - 其實也是一個實體，它包含在Account裡面，而且一個Account可以建立很多個Table。  <li>Entity ( Row ) - 實體，也很類似於Row ( 行 )，他是存於Table裡面的一個基本的資料類型，一個實體會有一組Properties ( 屬性 )，其中的\"PartitionKey\"和\"RowKey\"會組成唯一鍵。  <li>Property (Column) - 屬性，也很類似於Column ( 欄位 )，他代表著一個實體裡面的其中一個值，而且他支援豐富的型別，另外要注意的是，他有區分大小寫。  <li>PartitionKey - 每個實體都會有這個屬性，而這個屬性擁有類似分類的功能，例如，我們可能會把PartitionKey設為Car、機車，來分類。  <li>RowKey - 每個實體都會有這個屬性，我們會利用這個屬性來區別PartitonKey分出來類別裡面唯一的實體。  <li>Timestamp - 時間戳記，由系統紀錄此Entity何時被修改過。 </li>\n</ul>\n<p>其中PartitionKey和RowKey比較難讓人懂，其實PratitionKey就等於紀錄這個Entity是屬於哪一個類別，如下圖，假設有許多文章，我們就可以設定好幾筆的資料Partition Key為Examples Doc來進行分類 ( Partition 1 )，另外，又可以設定為FAQ Doc類 ( Partition  )，而同一個類(同一個Partition Key)會有許多的Entity，於是就用RowKey來代表唯一的Entity；所以當Partition Key加上Row Key，就可組合成獨一無二的Key，讓我們在茫茫的大Table找到我們想要的，此外，Partition Key也涉及了搜尋效能，所以分類的時候，要想清楚。</p>\n<p><a href=\"http://lh5.ggpht.com/-zt2LCifL9O8/Tq-uULnBdzI/AAAAAAAAA3g/S3gBiXj8tcc/s1600-h/image14.png\"><img src=\"http://lh6.ggpht.com/-EhQOcH66zi0/Tq-uU-4_-bI/AAAAAAAAA3s/7_Lx9atVahw/image_thumb8.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>此外，關於每個屬性的型態，可以參考此表。  <table cellspacing=\"0\" cellpadding=\"5\" width=\"100%\" border=\"1\"> <tbody> <tr> <td height=\"20\" valign=\"top\" width=\"204\"><strong>Property Type</strong></td> <td height=\"20\" valign=\"top\" width=\"432\"><strong>Details</strong></td></tr> <tr> <td height=\"20\" valign=\"top\" width=\"204\">Binary </td> <td height=\"20\" valign=\"top\" width=\"432\">An array of bytes up to 64 KB in size. </td></tr> <tr> <td height=\"20\" valign=\"top\" width=\"204\">Bool </td> <td height=\"20\" valign=\"top\" width=\"432\">A Boolean value. </td></tr> <tr> <td height=\"20\" valign=\"top\" width=\"204\">DateTime </td> <td height=\"20\" valign=\"top\" width=\"432\">A 64-bit value expressed as UTC time. The supported range of values is 1/1/1601 to 12/31/9999. </td></tr> <tr> <td height=\"20\" valign=\"top\" width=\"204\">Double </td> <td height=\"20\" valign=\"top\" width=\"432\">A 64-bit floating point value. </td></tr> <tr> <td height=\"20\" valign=\"top\" width=\"204\">GUID </td> <td height=\"20\" valign=\"top\" width=\"432\">A 128-bit globally unique identifier. </td></tr> <tr> <td height=\"20\" valign=\"top\" width=\"204\">Int </td> <td height=\"20\" valign=\"top\" width=\"432\">A 32-bit integer. </td></tr> <tr> <td height=\"20\" valign=\"top\" width=\"204\">Int64 </td> <td height=\"20\" valign=\"top\" width=\"432\">A 64-bit integer. </td></tr> <tr> <td height=\"20\" valign=\"top\" width=\"204\">String </td> <td height=\"20\" valign=\"top\" width=\"432\">A UTF-16-encoded value. String values may be up to 64 KB in size. </td></tr></tbody></table> <p>最後，因為是雲端儲存體，所以如果我們要取得Table，可想而知，就一定是使用Url來當作識別的位置啦!如下。</p>\n<p><a href=\"http://%3Caccount%3E.table.core.windows.net/%3Ctable%3E/\">http://&#x3C;account>.table.core.windows.net/&#x3C;table>/</a></p>\n<h4>來寫程式吧!!</h4>\n<p>接下來，我們就來撰寫程式看看吧，我相信大家應該也沒有那麼多的錢可以租用Windows Azure服務，老實說，小弟我也沒那麼多錢，所以我的範例都是在本機上面做測試。</p>\n<p>首先，要寫Windows Azure，必須先裝SDK，如果還沒裝的可以<a href=\"http://blog.sanc.idv.tw/2011/09/windows-azure.html\">參考這篇</a>。接下來就在Visual Studio裡面選擇Windows Azure專案。</p>\n<p><a href=\"http://lh5.ggpht.com/-BoUczi-6Ras/Tq-uVj5PKdI/AAAAAAAAA30/EMM8mNZIZFg/s1600-h/image_thumb512.png\"><img src=\"http://lh4.ggpht.com/-7EZJSdboUvI/Tq-uWzTVHfI/AAAAAAAAA38/dHK2ZAQJMbU/image_thumb51_thumb.png?imgmax=800\" alt=\"image_thumb5[1]\" title=\"image_thumb5[1]\"></a></p>\n<p>到這邊，就可以選擇Web Role，但小弟我不喜歡在這邊選擇，會利用後續再增加的做法，有興趣的可以<a href=\"http://blog.sanc.idv.tw/2011/10/windows-azure-web-role.html\">參考這篇</a>，如果只想要簡單Demo，也可以直接在這邊選擇ASP.NET Web Role ( 中文翻角色 )。</p>\n<p><a href=\"http://lh6.ggpht.com/-MTS59bNAnpI/Tq-uX5f7AMI/AAAAAAAAA4E/eKuwGPL5QCA/s1600-h/image_thumb162.png\"><img src=\"http://lh4.ggpht.com/--UDK-PrlitA/Tq-uYp2OiKI/AAAAAAAAA4M/Cb-eWeQmkic/image_thumb16_thumb.png?imgmax=800\" alt=\"image_thumb16\" title=\"image_thumb16\"></a></p>\n<p>接下來，我們先來看看最後寫完的範例程式執行起來的樣子吧；基本上就是長這樣，只要在姓名與住址的地方填入資料，新增後就會在Grid裡面增加，如果要刪除，就可以自行刪除檔案。</p>\n<p><a href=\"http://lh4.ggpht.com/-f7yZ9WxE_6s/Tq-uZ0jx0AI/AAAAAAAAA4U/rIWl0tduzdw/s1600-h/image%25255B3%25255D.png\"><img src=\"http://lh5.ggpht.com/-Hw-UVBYYEEY/Tq-uaj9Pv2I/AAAAAAAAA4Y/kD6XNdy5eHE/image_thumb%25255B1%25255D.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>這次的這個範例，裡面會有許多的檔案，所以我先把檔案列出來；主要會撰寫到的有:</p>\n<ul>\n<li>Customer.cs - 此為Cusomter類別，裡面會放置姓名和地址屬性。  <li>TableContext.cs - 此定義為Customers這個Table。  <li>DataSource - 存取資料用的。  <li>Default.aspx - 主要的Web Role。 </li>\n</ul>\n<p><a href=\"http://lh3.ggpht.com/-Ivmm7spiXfw/Tq-ubF03NxI/AAAAAAAAA4k/yvsf6I33nx8/s1600-h/image%25255B7%25255D.png\"><img src=\"http://lh4.ggpht.com/-oVIEFRCh_nU/Tq-ub-2tvXI/AAAAAAAAA4s/jfkta4nPjHc/image_thumb%25255B3%25255D.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>既然是物件導向，那我們就寫核心的Customer吧；Customer算是滿簡單的，但要注意一下，Customer必須要繼承TableServiceEntity，別忘了，Azure Table的Entity有一些必定要有的屬性( 例如:PartitionKey )，所以並不是所有東西都可以往上丟，我們必須先繼承TableServiceEntity；然後我們於建構式中將PartitionKey傳入Customers，而RowKey的部分，則利用Guid.NewGiud()來產生唯一碼。</p>\n<pre class=\"brush: csharp;\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\nusing Microsoft.WindowsAzure.StorageClient;\n\nnamespace WebApplicationRole\n{\n    //需要繼承TableServiceEntity\n    public class Customer : TableServiceEntity\n    {\n        public Customer(string partitionKey, string rowKey):base(partitionKey,rowKey)\n        {\n        }\n\n        public Customer()\n            : this(\"Customers\", Guid.NewGuid().ToString())\n        {\n        }\n\n        public string name { get; set; }\n        public string Address { get; set; }\n\n    }\n}\n</pre>\n<p>這樣子就完成了Customer，接下我們來設計TableContext，TableContext必須繼承於TableServiceContext，理由和TableServiceEntity一樣，而建構式的部分，則必須傳入bassAddress，和驗證，如果我們取得了Account，我們就可以利用Account的TableEndpoint方法來取得bassAddress，同樣的，也可以利用Account的Credentials來取得驗證；其次，我們定義了Customers的這個屬性，並且利用get來取得所有的Customer，需要注意的是，這裡會使用TableServiceContext的CreateQuery方法來傳回所有的Customer。<customer></p>\n<pre class=\"brush: csharp;\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\nusing Microsoft.WindowsAzure.StorageClient;\nusing Microsoft.WindowsAzure;\n\nnamespace WebApplicationRole\n{\n    public class TableContext : TableServiceContext\n    {\n        public TableContext(string baseAddress,StorageCredentials credentials):base(baseAddress,credentials)\n        {\n        }\n\n        //定義Table名稱\n        public const string TableName = \"Customers\";\n\n        //取得Customers這個Table的所有資料\n        public IQueryable&lt;customer&gt; Customers\n        {\n            get\n            {\n                //需要加入System.Data.Services.Client。\n                //利用CreateQuery來取得Customers裡面所有的Customer\n                return this.CreateQuery&lt;customer&gt;(TableName);\n            }\n        }\n    }\n}\n</pre>\n<p>完成了TableContext，我們就可以開始撰寫DataSouce.cs了，顧名思義，就是撰寫取得資料來源的類別；這個類別會定義查詢、新增和刪除；我們會利用建構子去建構連線，並且取得Account和TableContext( 可以想像成Table )，後續我們才能繼續處理；select的地方比較容易理解，利用Linq的方式來取得Customer；而Delete則有個地方要注意，我們會用AttachTo來追蹤支援，這樣才會知道要刪除的位置，刪除後再利用SaveChanges去將資料寫回雲端儲存體；而insert的部分，比較簡單，利用AddObject將Customer加到TableContext裡面，一樣使用SaveChanges來進行變更；而AddObject和AttachTo，必須給他們實體的名稱，也就是第一個參數，而這裡的名稱就是Customers。</p>\n<pre class=\"brush: csharp;\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\n//要手動加這三行\nusing Microsoft.WindowsAzure;\nusing Microsoft.WindowsAzure.StorageClient;\nusing Microsoft.WindowsAzure.ServiceRuntime;\n\nnamespace WebApplicationRole\n{\n    public class DataSource\n    {\n        private TableContext _ServiceContext = null;\n\n        public DataSource()\n        {\n            //取得Account\n            var storageAccount = CloudStorageAccount.DevelopmentStorageAccount;\n            //取得TableContext\n            _ServiceContext = new TableContext(storageAccount.TableEndpoint.ToString(), storageAccount.Credentials);\n            //假如沒有此Table，則建立此Table\n            storageAccount.CreateCloudTableClient().CreateTableIfNotExist(TableContext.TableName);\n        }\n\n        public IEnumerable&lt;customer&gt; Select()\n        {\n            var results = from c in _ServiceContext.Customers\n                          select c;\n            return results;\n        }\n\n        public void Delete(Customer itemToDelete)\n        {\n            //追蹤資源，這樣才知道位置在哪裡。\n            _ServiceContext.AttachTo(TableContext.TableName, itemToDelete, \"*\");\n            _ServiceContext.DeleteObject(itemToDelete);\n            _ServiceContext.SaveChanges();\n        }\n\n        public void Insert(Customer newItem)\n        {\n            _ServiceContext.AddObject(TableContext.TableName, newItem);\n            _ServiceContext.SaveChanges();\n        }\n    }\n}\n</pre>\n<p>最後，我們就可以編輯HTML了，我們利用ASP.NET的ObjectDataSource來指向剛剛設定好的DataSource，並且讓Grid Bind再一起。</p>\n<pre class=\"brush: xml;\">&lt;%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeBehind=\"Default.aspx.cs\" Inherits=\"WebApplicationRole._Default\" %&gt;\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" &gt;\n&lt;head id=\"Head1\" runat=\"server\"&gt;\n    &lt;title&gt;Table Demo&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=\"form1\" runat=\"server\"&gt;\n    &lt;div&gt;\n        &lt;asp:GridView id=\"DataView\" DataSourceId=\"TableData\" DataKeyNames=\"PartitionKey,RowKey\" \n        AllowPaging=\"False\" AutoGenerateColumns=\"True\" Runat=\"server\" &gt;\n        &lt;Columns&gt;\n            &lt;asp:CommandField ShowDeleteButton=\"true\"  /&gt;\n        &lt;/Columns&gt;\n    &lt;/asp:GridView&gt;    \n        &lt;br /&gt;        \n    &lt;asp:FormView id=\"frmAdd\" DataSourceId=\"TableData\" DefaultMode=\"Insert\" Runat=\"server\" Width=\"403px\"&gt;\n        &lt;InsertItemTemplate&gt;\n            &lt;asp:Label id=\"nameLabel\" Text=\"姓名:\" AssociatedControlID=\"nameBox\" Runat=\"server\" /&gt;\n            &lt;asp:TextBox id=\"nameBox\" Text='&lt;%# Bind(\"Name\") %&gt;' Runat=\"server\" /&gt;\n            &lt;asp:Label id=\"addressLabel\" Text=\"住址:\" AssociatedControlID=\"addressBox\" Runat=\"server\" /&gt;\n            &lt;asp:TextBox id=\"addressBox\" Text='&lt;%# Bind(\"Address\") %&gt;' Runat=\"server\" /&gt;\n            &lt;asp:Button id=\"insertButton\" Text=\"新增\" CommandName=\"Insert\" Runat=\"server\"/&gt;\n        &lt;/InsertItemTemplate&gt;\n    &lt;/asp:FormView&gt;\n    &lt;%-- Data Sources --%&gt;\n    &lt;asp:ObjectDataSource runat=\"server\" ID=\"TableData\"  TypeName=\"WebApplicationRole.DataSource\"\n        DataObjectTypeName=\"WebApplicationRole.Customer\" \n        SelectMethod=\"Select\" DeleteMethod=\"Delete\" InsertMethod=\"Insert\"&gt;    \n    &lt;/asp:ObjectDataSource&gt;\n\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>最後是Default.aspx.cs的程式碼，這就沒甚麼好講的了。</p>\n<pre class=\"brush: csharp;\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\nusing System.Web.UI;\nusing System.Web.UI.WebControls;\n\nnamespace WebApplicationRole\n{\n    public partial class _Default : System.Web.UI.Page\n    {\n        protected void Page_Load(object sender, EventArgs e)\n        {\n            DataSource dataSource = new DataSource();\n        }\n    }\n}\n</pre>\n<p>我們這又就完成了程式，如果有寫過Entity Framework等的人，可能會覺得比較熟悉，但如果沒寫過Entity Framework的人，可能有許多地方搞不太清楚，有興趣的話，也可以去翻一翻關於Entity Framework的書籍，或是Linq的書籍，我相信會有很大的幫助。</p>\n<h4>參考資料</h4>\n<ul>\n<li><a href=\"http://www.microsoft.com/windowsazure/Whitepapers/WindowsAzureTable/\" title=\"http://www.microsoft.com/windowsazure/Whitepapers/WindowsAzureTable/\">http://www.microsoft.com/windowsazure/Whitepapers/WindowsAzureTable/</a></li>\n</ul>","excerpt":"2012/11/06 更新 - 感謝Wifi哥的指教，修正了程式碼的錯誤，由原本的DataKeyNames=\"PartitionKey\"改成DataKeyNames=\"PartitionKey,RowKey\"。 說到Table，大家就會直接聯想到DB的Table，而Windows…"}},"pageContext":{"type":"posts","next":{"frontmatter":{"path":null,"title":"Windows Azure 儲存體–Blob","tags":["ASP.NET","Azure"]},"fields":{"slug":"/2011/10/31/Windows-Azure-儲存體–Blob/"},"fileAbsolutePath":"/home/runner/work/blog.sanc.idv.tw/blog.sanc.idv.tw/src/posts/blog.sanc.idv.tw/Windows-Azure-儲存體–Blob.md"},"previous":{"frontmatter":{"path":null,"title":"WPF - Command Property、CommandBinding、ApplicationCommands深入探討","tags":["Silveright","WPF"]},"fields":{"slug":"/2011/11/02/WPF-Command-Property、CommandBinding、ApplicationCommands深入探討/"},"fileAbsolutePath":"/home/runner/work/blog.sanc.idv.tw/blog.sanc.idv.tw/src/posts/blog.sanc.idv.tw/WPF-Command-Property、CommandBinding、ApplicationCommands深入探討.md"}}}}