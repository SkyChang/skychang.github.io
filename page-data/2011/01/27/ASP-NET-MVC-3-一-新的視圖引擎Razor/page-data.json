{"componentChunkName":"component---src-templates-page-js","path":"/2011/01/27/ASP-NET-MVC-3-一-新的視圖引擎Razor/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"ASP.NET MVC 3 (一) 新的視圖引擎Razor","date":"27 January 2011","author":"Sky Chang","excerpt":null,"tags":["ASP.NET MVC"],"coverImage":null},"id":"912be9c1-b349-51c6-95cf-c765397ea070","html":"<p>ASP.NET MVC 3 強化了許多的功能，其中一個就是新的視圖引擎Razor。</p>\n<p>Razor有許多的特色，例如:</p>\n<ol>\n<li>Razor的語法非常乾淨，不會像以前aspx一堆框框與符號。</li>\n<li>Razor的語法很簡單易學，其實也就是C#和VB。</li>\n<li>VS2010對Razor完全的支援IntelliSense和程式碼顏色。</li>\n<li>Razor還可以支援Unit Test，而不需要啟動web Server。</li>\n</ol>\n<p>其中Unit Test的部分，未來再來解說吧，</p>\n<p>現在，來看看Razor是怎樣子的吧。</p>\n<p>首先，寫程式最基本最基本要會的就是註解。</p>\n<p>Razor的註解也很簡單，只要使用@* *@包起來就可以。</p>\n<pre class=\"brush: xml\">@* 這是簡單的Hello Razor*@\n&lt;p&gt;Hello Razor&lt;/p&gt;\n</pre>\n<p>接下來，還記得ASP.NET MVC 2之前的ASPX視圖引擎是怎樣寫的嗎?</p>\n<p>我們先看一下ASP.NET MVC時使用的。</p>\n<pre class=\"brush: xml\">&lt;p&gt;Hello &lt;%=name%&gt;&lt;p&gt;\n</pre>\n<p>到了ASP.NET MVC 2時我們可以改寫成這樣。</p>\n<pre class=\"brush: xml\">&lt;p&gt;Hello &lt;%:name%&gt;&lt;p&gt;\n</pre>使用<%:%>來將輸出的文字編碼，以防遭受到攻擊。\n<p>而Razor就很簡單了，如下</p>\n<pre class=\"brush: xml\">&lt;p&gt;Hello @name&lt;p&gt;\n</pre>沒錯，就是那麼的簡單，只要在@後面接變數，就會自動輸出變數內容。\n<p>另外，當初在寫ASPX視圖時，遇到最大的問題，就是一堆的&#x3C;%%></p>\n<p>不但礙眼，又難看，現在Razor可以使用{}來替代。</p>\n<pre class=\"brush: xml\">&lt;ol&gt;\n@foreach(var c in customers){\n  &lt;li&gt;@c.name&lt;/li&gt;\n}\n&lt;/ol&gt;\n</pre>\n<p>變的超級簡潔！！甚至還可以這樣用</p>\n<pre class=\"brush: xml\">&lt;p&gt;\n@{\nstring name = &quot;Razor&quot;;\nstring message = &quot;Hello &quot; + name;\nif(name == &quot;Razor&quot;)\n{\n  @message\n}else\n{\n  @:Error\n}\n}&lt;/p&gt;\n</pre>這時可能會看到一個比較特別的@:符號，\n<p>他的用途有點像跳脫字元，如上面的程式碼，在p標籤裡面包了if判斷式，</p>\n<p>如果沒有加上@:，在IDE就會出現錯誤，因為IDE會判斷這是一個變數，</p>\n<p>當執行時，當然也會出錯，因為編譯器也會認定他是一個變數。</p>\n<p>所以我們要加上一個@:，告訴編譯器，其實Error只是單純的一個文字而已。</p>\n<p>那如果有很多行的文字呢?例如:</p>\n<pre class=\"brush: xml\">@{\n  @:Test1\n  @:Test2\n  @:Test3\n}\n</pre>\n<p>也很簡單，只要加上Razor特定的Text標籤，就不用打一堆@:</p>\n<pre class=\"brush: xml\">@{\n  &lt;text&gt;\n  Test1\n  Test2\n  Test3\n  &lt;/text&gt;\n}\n</pre>\n<p>當然，也可很複雜的混搭，但這樣就失去了Razor簡單明瞭的意義了。</p>\n<pre class=\"brush: xml\">&lt;p&gt;\n@{\n  &lt;text&gt;\n  @{\n    string test2 = &quot;2&quot;;\n    &lt;text&gt;\n    test1\n    @test2\n    &lt;/text&gt;\n  }\n  &lt;/text&gt;\n}\n&lt;/p&gt;\n</pre>\n<p>另外是單行，也可以寫成這樣。</p>\n<pre class=\"brush: xml\">&lt;p&gt;@(&quot;Hello&quot; + name)&lt;/p&gt;\n</pre>\n<p>當然，既然能處理變數了，基本的物件與方法也可以直接叫用。</p>\n<pre class=\"brush: xml\">&lt;p&gt;Now : @DateTime.Now&lt;/p&gt;\n</pre>\n<p>就如前面所說的，Razor視圖引擎和aspx比較起來，非常的乾淨，</p>\n<p>也很容易去閱讀，但不代表說，所有的邏輯就可以直接放在這裡處理，</p>\n<p>這裡要處理的應該是視圖邏輯，這要注意喔!</p>\n<p>參考資料</p>\n<p><a href=\"http://weblogs.asp.net/scottgu/archive/2010/07/02/introducing-razor.aspx\">http://weblogs.asp.net/scottgu/archive/2010/07/02/introducing-razor.aspx</a></p>","excerpt":"ASP.NET MVC 3 強化了許多的功能，其中一個就是新的視圖引擎Razor。 Razor有許多的特色，例如: Razor的語法非常乾淨，不會像以前aspx一堆框框與符號。 Razor的語法很簡單易學，其實也就是C#和VB。 VS2010對Razor…"}},"pageContext":{"type":"posts","next":{"frontmatter":{"path":null,"title":"ASP.NET MVC 3 RTM","tags":["ASP.NET MVC"]},"fields":{"slug":"/2011/01/26/ASP-NET-MVC-3-RTM/"},"fileAbsolutePath":"/home/runner/work/blog.sanc.idv.tw/blog.sanc.idv.tw/src/posts/blog.sanc.idv.tw/ASP-NET-MVC-3-RTM.md"},"previous":{"frontmatter":{"path":null,"title":"ASP.NET MVC 3 (二) Razor的@model","tags":["ASP.NET MVC"]},"fields":{"slug":"/2011/01/27/ASP-NET-MVC-3-二-Razor的-model/"},"fileAbsolutePath":"/home/runner/work/blog.sanc.idv.tw/blog.sanc.idv.tw/src/posts/blog.sanc.idv.tw/ASP-NET-MVC-3-二-Razor的-model.md"}}}}