{"componentChunkName":"component---src-templates-page-js","path":"/2011/12/29/WPF-–-MVVM-一/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"WPF – MVVM (一)","date":"29 December 2011","author":"Sky Chang","excerpt":null,"tags":["Design Patten","Silveright","WPF"],"coverImage":null},"id":"093122c2-ba0f-542f-8f11-bf03eb848fc3","html":"<p>小弟本來是專注於網頁設計，最近被公司抓去寫WPF，所以就開始了新的生涯XDD，而既然講到WPF，就不可能不需要知道MVVM，翻了一些國外文章，寫的還不錯，小弟我就邊看邊把他記錄一下，並分享給大家吧，不過因為MVVM的東西比較多，所以小弟我也會分成好幾篇慢慢地來講解。</p>\n<h4>What’s MVVM</h4>\n<p>MVVM當然也是縮寫，也就是Model-View-ViewModel，簡稱MVVM，他也算是一種設計樣式，目的是為了讓各自的相依性降低，這樣以後也比較好維護與測試，而MVVM的意思如下。</p>\n<ul>\n<li>Model是一個來自服務或資料庫數據的類別。  <li>View就是一個顯示的介面，預計是要將資料展現出來。  <li>ViewModel就如同膠水般，它把Model和View黏合起來。它將Model包裝起來，而且 ViewModel還會控制View的應用部分，例如在View那邊按下按鈕後，要處理的動作，實際上會放在ViewModel。 </li>\n</ul>\n<p>而它們之間的關係如下圖般，View也就是XAML，透過Data Binding技術與View Model繫結，但實際上ViewModel是不會知道哪個View繫結了它( ViewModel )；而ViewModel與Model的關係也是如此，Model永遠不知道他被哪個ViewModel所參考到，而ViewModel則會參考到Model；換言之，就是View會知道ViewModel，ViewModel會知道Model，這種單向的關係。  <p><a href=\"http://lh6.ggpht.com/-SNMZQCnW2o0/Tv1l5YmTphI/AAAAAAAABUo/dS6vbIoJbwU/s1600-h/image4.png\"><img src=\"http://lh3.ggpht.com/-ahRKYkMWsIk/Tv1l56Z2JxI/AAAAAAAABUw/dm2DHUfC35c/image_thumb2.png?imgmax=800\" alt=\"image\" title=\"image\"></a> </p>\n<h4>View與ViewModel</h4>\n<p>其實如上圖所說，其實View與ViewModel溝通是利用了Binding的技術；我們可以利用下圖更明確的理解，</p>\n<p><a href=\"http://lh3.ggpht.com/-WhgAd9WCjrE/Tv1l7GWRtwI/AAAAAAAABU4/RFVZHU9oDfk/s1600-h/image9.png\"><img src=\"http://lh4.ggpht.com/-KHsqrgLIly0/Tv1l8Re5qII/AAAAAAAABVA/SJxpgRLORR4/image_thumb5.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<h4>逐步進行(一)</h4>\n<p>不過我想講了那麼多，還不如實際的一步一步來走走看，我想感覺是比較明顯的，首先，我們先實作一個簡單的MVVM架構試試看，而這個畫面是這次預計的目標，其實滿簡單的，就是會顯示一個文章Title ( 我稱取為PostsTitle )，然後按下按鈕後，會改變Title，雖然這畫面看起來沒啥成就感，但至少我們可以從很簡單的例子看到MVVM。</p>\n<p><a href=\"http://lh3.ggpht.com/-Fk_5CpItTgU/Tv1l9ajUiYI/AAAAAAAABVI/49XE0O22JPc/s1600-h/image%25255B4%25255D.png\"><img src=\"http://lh5.ggpht.com/-uaq15MSJtHU/Tv1l-KRzpgI/AAAAAAAABVQ/VJx2GN3CXU4/image_thumb%25255B1%25255D.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<h4>Model</h4>\n<p>提到MVVM，當然第一步我們要先把Model建立起來，假設這套系統是要處理文章資料的管理 ( 實際上我並不會把它完成，這裡只是假設要建立文章管理系統 )，既然如此，最重要的Model，顧名思義就是文章了，假設我們此類別取名為Posts，並開始撰寫此類別。</p>\n<p>以下是Posts Class的程式碼，超級簡單，就兩行，裡面兩個屬性。</p>\n<pre class=\"brush: csharp;\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace WPFMVVM\n{\n    public class Posts\n    {\n        public string postsText { get; set; }\n        public string postsTitle { get; set; }\n\n    }\n}\n</pre>\n<p>到這邊我們的Model就建置好了，接下來我們要做的是黏合View和Model的ViewModel!</p>\n<h4>ViewModel</h4>\n<p>其實也不長，但比較特別的是，ViewModel裡面的屬性會參考到Model，換言之，Model不會知道有那些ViewModel用到他 ( 因為Model裡面並沒有參考到ViewModel. )，然後我們會定義一些方法，讓Model的屬性可以被存取到 ( 例如這邊的PostsTitle方法 )。</p>\n<pre class=\"brush: csharp;\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace WPFMVVM\n{\n    public class PostsViewModel\n    {\n        public Posts posts{ get; set;}\n\n        public PostsViewModel()\n        {\n            posts = new Posts { postsText = \"\", postsTitle = \"Unknown\" };\n        }\n\n        public string PostsTitle\n        {\n            get { return posts.postsTitle; }\n            set { posts.postsTitle  = value; }\n        } \n    }\n}\n\n</pre>\n<p>接下來，我們再來處理View的部分。</p>\n<h4>View</h4>\n<p>這個地方比較要注意的是Window標籤裡面，我們必須要定義一個local這個NameSpace，當然這個local你也可以取名其他的名稱，而後面接的就是我們剛剛定義ViewModel的NameSpace，其次就是DataContext標籤裡面，我們直接實例化PostsViewModel出來；最後利用Binding將Label的Content細節至PostsViewModel的PostsTitle。</p>\n<pre class=\"brush: xml;\">&lt;Window x:Class=\"WPFMVVM.MainWindow\"\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:local=\"clr-namespace:WPFMVVM\"\n        Title=\"MainWindow\" Height=\"350\" Width=\"525\"&gt;\n    &lt;Window.DataContext&gt;\n        &lt;!-- 實例化PostViewModel --&gt;\n        &lt;local:PostsViewModel /&gt;\n    &lt;/Window.DataContext&gt;\n    &lt;Grid&gt;\n        &lt;Label  Content=\"{Binding PostsTitle}\"    Height=\"28\" HorizontalAlignment=\"Left\" Margin=\"12,12,0,0\" Name=\"label1\" VerticalAlignment=\"Top\" /&gt;\n        &lt;Button Content=\"Button\" Height=\"23\" HorizontalAlignment=\"Left\" Margin=\"145,13,0,0\" Name=\"button1\" VerticalAlignment=\"Top\" Width=\"75\" Click=\"button1_Click\" /&gt;\n    &lt;/Grid&gt;\n&lt;/Window&gt;\n</pre>\n<p>這樣就是MVVM!那麼簡單!?，當然不是，這只是簡單的一個Binding而已，但不管怎樣，我們已經看到了Model和ViewModel是如何處理的，也可以清楚的了解了Model、ViewModel與View之間的關係，雖然目前只有利用Binding來將PostsTitle顯示於Label，按下Button也沒啥反應 ( 因為我還沒實作阿XDD )，我們下一篇繼續看下去。</p>\n<h4>參考資料</h4>\n<ul>\n<li><a href=\"http://www.codeproject.com/KB/WPF/WpfMvvmQuickStart.aspx\" title=\"http://www.codeproject.com/KB/WPF/WpfMvvmQuickStart.aspx\">http://www.codeproject.com/KB/WPF/WpfMvvmQuickStart.aspx</a><li><a href=\"http://www.codeproject.com/KB/WPF/MVVMMadeSimple.aspx\" title=\"http://www.codeproject.com/KB/WPF/MVVMMadeSimple.aspx\">http://www.codeproject.com/KB/WPF/MVVMMadeSimple.aspx</a><li><a href=\"http://www.codeproject.com/KB/WPF/MVVMQuickTutorial.aspx\" title=\"http://www.codeproject.com/KB/WPF/MVVMQuickTutorial.aspx\">http://www.codeproject.com/KB/WPF/MVVMQuickTutorial.aspx</a><li><a href=\"http://csharperimage.jeremylikness.com/2010/04/model-view-viewmodel-mvvm-explained.html\" title=\"http://csharperimage.jeremylikness.com/2010/04/model-view-viewmodel-mvvm-explained.html\">http://csharperimage.jeremylikness.com/2010/04/model-view-viewmodel-mvvm-explained.html</a></li>\n</ul>","excerpt":"小弟本來是專注於網頁設計，最近被公司抓去寫WPF，所以就開始了新的生涯XDD，而既然講到WPF，就不可能不需要知道MVVM，翻了一些國外文章，寫的還不錯，小弟我就邊看邊把他記錄一下，並分享給大家吧，不過因為MVVM的東西比較多，所以小弟我也會分成好幾篇慢慢地來講解。 What’s…"}},"pageContext":{"type":"posts","next":{"frontmatter":{"path":null,"title":"TFS – BurnDown燃燒圖","tags":["Scrum","TFS"]},"fields":{"slug":"/2011/12/28/TFS-–-BurnDown燃燒圖/"},"fileAbsolutePath":"/home/runner/work/blog.sanc.idv.tw/blog.sanc.idv.tw/src/posts/blog.sanc.idv.tw/TFS-–-BurnDown燃燒圖.md"},"previous":{"frontmatter":{"path":null,"title":"WPF – MVVM (二)","tags":["Design Patten","Silveright","WPF"]},"fields":{"slug":"/2011/12/29/WPF-–-MVVM-二/"},"fileAbsolutePath":"/home/runner/work/blog.sanc.idv.tw/blog.sanc.idv.tw/src/posts/blog.sanc.idv.tw/WPF-–-MVVM-二.md"}}}}