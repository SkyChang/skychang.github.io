{"componentChunkName":"component---src-templates-page-js","path":"/2011/12/29/WPF-–-MVVM-二/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"WPF – MVVM (二)","date":"29 December 2011","author":"Sky Chang","excerpt":null,"tags":["Design Patten","Silveright","WPF"],"coverImage":null},"id":"978d975e-04a6-5118-9733-e7edc4198c92","html":"<p>上一篇講到利用Binding來讓View與ViewModel的繫結，還有ViewModel與Model的關係，但離整個MVVM還有一點點的距離，接下來，我們繼續看下去。 ( 感覺好像漫畫連載喔…放心我不會和某獵x一樣拖稿的。 )</p>\n<h4>Button事件處理</h4>\n<p>上一篇我們還沒實際處理按下Button的功能，這裡我們實際的處理一下吧。</p>\n<p>下面是View的cs檔，我們會建立一個私有的屬性，這個屬性會利用base.context將XMAL那邊實例化的PostsViewModel傳回來，另外，傳回來的物件需要轉型一下；接下來，我們就可以撰寫Button的Click事件，在這邊，我們將新的值\"SkyMVVM\"這個Title名稱，傳給PostViewModel ( 實際上會寫回到Model裡面 )，當然這樣子Label是不會改變的。</p>\n<pre class=\"brush: csharp;\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\n\nnamespace WPFMVVM\n{\n    public partial class MainWindow : Window\n    {\n        PostsViewModel _postsViewModel;\n\n        public MainWindow()\n        {\n            InitializeComponent();\n            _postsViewModel = (PostsViewModel)base.DataContext;\n        }\n\n        private void button1_Click(object sender, RoutedEventArgs e)\n        {\n            //這裡還沒辦法通知View，告訴View要更改Label的content\n            _postsViewModel.PostsTitle = \"SkyMVVM\";\n        }\n    }\n}\n</pre>\n<p>這邊，如果要Label改變，最直接的做法是在Button Click裡面再加上Label.Content = “SkyMVVM”這行，這樣就可以讓Label馬上的改變，但這樣做當然不好啊，第一，這樣就失去了Binding的意義了，第二，這樣做，Button Click就和Label有了很深的關係。</p>\n<p>所以最好的做法是，當我們的PostViewModel的PostsTitle改變的時候，自動讓Label的Content去做改變，但要怎樣做呢?</p>\n<h4>INotifyPropertyChanged</h4>\n<p>登登豋登!沒錯我們就是要利用INotifyPropertyChanged這個介面，這個介面裡面含有一個PropertyChanged事件，此事件可以更新繫結的目標喔!</p>\n<p>所以我們改寫一下ViewModel的程式碼，讓他實作InotifyPropertyChanged，並且寫一個Function ( RaisePropertyChanged )，此function會產生一個事件，並通知繫結的Label更改Content。</p>\n<pre class=\"brush: csharp;\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.ComponentModel;\n\nnamespace WPFMVVM2\n{\n    //實作InotifyPropertyChanged\n    public class PostsViewModel : INotifyPropertyChanged\n    {\n        public Posts posts{ get; set;}\n\n        public event PropertyChangedEventHandler PropertyChanged;\n\n        public PostsViewModel()\n        {\n            posts = new Posts { postsText = \"\", postsTitle = \"Unknown\" };\n        }\n\n        public string PostsTitle\n        {\n            get { return posts.postsTitle; }\n            set \n            {\n                if (posts.postsTitle != value)\n                {\n                    posts.postsTitle = value;\n                    RaisePropertyChanged(\"postsTitle\");\n                }\n            }\n        } \n\n        //產生事件的方法\n        private void RaisePropertyChanged(string propertyName)\n        {\n            PropertyChangedEventHandler handler = PropertyChanged;\n            if (handler != null)\n            {\n                handler(this, new PropertyChangedEventArgs(propertyName));\n            }\n        }\n    }\n}\n</pre>\n<p>做到此，我們就成功地讓ViewModel的屬性和Label進行分離了，也就是說ViewModel可以完全不用知道View了!但這樣就算完成MVVM了嗎??還沒還沒，我們繼續看下一篇吧。</p>\n<h4>參考資料</h4>\n<ul>\n<li><a href=\"http://www.codeproject.com/KB/WPF/WpfMvvmQuickStart.aspx\" title=\"http://www.codeproject.com/KB/WPF/WpfMvvmQuickStart.aspx\">http://www.codeproject.com/KB/WPF/WpfMvvmQuickStart.aspx</a><li><a href=\"http://www.codeproject.com/KB/WPF/MVVMMadeSimple.aspx\" title=\"http://www.codeproject.com/KB/WPF/MVVMMadeSimple.aspx\">http://www.codeproject.com/KB/WPF/MVVMMadeSimple.aspx</a><li><a href=\"http://www.codeproject.com/KB/WPF/MVVMQuickTutorial.aspx\" title=\"http://www.codeproject.com/KB/WPF/MVVMQuickTutorial.aspx\">http://www.codeproject.com/KB/WPF/MVVMQuickTutorial.aspx</a><li><a href=\"http://csharperimage.jeremylikness.com/2010/04/model-view-viewmodel-mvvm-explained.html\" title=\"http://csharperimage.jeremylikness.com/2010/04/model-view-viewmodel-mvvm-explained.html\">http://csharperimage.jeremylikness.com/2010/04/model-view-viewmodel-mvvm-explained.html</a></li>\n</ul>","excerpt":"上一篇講到利用Binding來讓View與ViewModel的繫結，還有ViewModel與Model的關係，但離整個MVVM還有一點點的距離，接下來，我們繼續看下去。 ( 感覺好像漫畫連載喔…放心我不會和某獵x一樣拖稿的。 ) Button…"}},"pageContext":{"type":"posts","next":{"frontmatter":{"path":null,"title":"WPF – MVVM (一)","tags":["Design Patten","Silveright","WPF"]},"fields":{"slug":"/2011/12/29/WPF-–-MVVM-一/"},"fileAbsolutePath":"/home/runner/work/blog.sanc.idv.tw/blog.sanc.idv.tw/src/posts/blog.sanc.idv.tw/WPF-–-MVVM-一.md"},"previous":{"frontmatter":{"path":null,"title":"WPF – MVVM (三)","tags":["Design Patten","Silveright","WPF"]},"fields":{"slug":"/2011/12/31/WPF-–-MVVM-三/"},"fileAbsolutePath":"/home/runner/work/blog.sanc.idv.tw/blog.sanc.idv.tw/src/posts/blog.sanc.idv.tw/WPF-–-MVVM-三.md"}}}}