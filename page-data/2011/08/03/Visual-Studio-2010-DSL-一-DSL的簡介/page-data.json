{"componentChunkName":"component---src-templates-page-js","path":"/2011/08/03/Visual-Studio-2010-DSL-一-DSL的簡介/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Visual Studio 2010 DSL (一) DSL的簡介","date":"03 August 2011","author":"Sky Chang","excerpt":null,"tags":["DSL","Visual Studio"],"coverImage":null},"id":"838401d1-7362-59be-9d96-08789b4d2e7d","html":"<p>最近又看到IThome的一篇文章，IBM個人電腦和MS-DOS邁入30年頭，才驚覺其實電腦真正開始發展也不過短短30年頭，而短短的30年頭，就已經佔領了每個人的生活，同樣的，程式的發展也沒幾年，所以，不要太苛求我們寫程式的了，整個軟體工程，也不過短短的幾年發展而已啊~~回想當年，以前上課所教的瀑布式開發法，直到現在，演進也算是非常快的了。</p>\n<p>最近因為公司再導入軟體工程的一些東西，所以又開始看了一些關於架構，設計等等之類的書籍，說到軟體工程的一些東西，除了超久超久以前上課所學的瀑布式等等外，當初比較有印象的就是好幾年前在學校做專題的案例了，那時候是要寫一個網頁UI程式碼自動產生器，也就是利用UML的循序圖和類別圖來斷定必須要有那些UI介面，並讓他自動產生，而整個專案過程，是使用MDA配合UML來開發，後來隨著時間，又看了一堆敏捷、XP等等等，直到最近，因DDD的關係，不小心看到了DSL。</p>\n<p>廢話說了一堆，那到底甚麼是DSL，今天的主題並不是要用Visual Studio 2010開發任天堂的NDSL喔…，如果是的話，我想我大概就會紅了，其實DSL的全名是Domain Specific Languages，直接翻譯就是\"領域特定語言\"，或是倒裝一下\"特定領域語言\"，目前看下來，\"特定領域語言\"這種中翻比較多人使用。</p>\n<p>在解釋甚麼是DSL之前，我必須要先強調，DSL並不是像C#、Java這類的程式語言，也不是像UML這類的圖形語言，反而言之，他應該是可以包含C#、Java和UML等，換言之，他比較像是一種概念。其實DSL的概念，可以簡單說成，\"利用你自己所定義的東西，來處理不斷重複的事情，並且最終可以產生你所預期的程式碼。\"</p>\n<p>舉例來說，Visual Studio裡面的LinqToSql和EntityFramework設計器，就是用DSL所寫出來的，所以DSL定義了每個Entity圖是代表著甚麼意義，兩個Entity之間的線是代表著甚麼關聯，最終畫出來的圖，應該怎樣產出程式碼。也因此，DSL其實是一種特別用來描述某個特殊領域的語言，而這個EntityFramework，就是種特殊的領域。除此之外，Visual Studio 2010的UML Modeling Project裡面的循序、類別圖等，也都是用Visual Studion DSL開發出來的。</p>\n<p>我們再來看另外一個例子，大家應該常常會有這種感覺，今天做完這個專案，下次做另外一個專案的時候，有許多東西是很類似的，這時大家會怎麼做?，像我比較笨一點就會使用拷貝貼上改改改的方式來完成吧，而這種區塊，可能就是某種特定的領域，這時候，就可以考慮使用DSL來將此區段模組化，未來就可以直接使用。</p>\n<p>像是EntityFramework設計器就是一個例子，我們不同的專案，不可能都用一套全新的設計器吧，而是所有專案都會使用EntityFramework設計器，所以今天把此領域模組化，未來就可以不斷的適用於各種不同地方。</p>\n<p>而講到DSL，就不能不提DSD。</p>\n<p>利用DSL所設計與開發的模式，就稱之為DSD Domain Specific Development</p>\n<p>我們再從整個系統的角度來看，整個系統中，通常設計完後，可能會有固定不常變動的區塊和常常需要變動的區塊，而DSD的設計，就是尋找出經常需要變動的區塊，由設計人員使用DSL預先定義好所有的Domain，來讓那些站在更高層次，領域專家的角度，(或是程式設計師自己)來處理這類需要不斷重複解決問題的方法，而不需要讓程式設計師不斷的重複的撰寫這些程式，最後由DSL產生出來的程式碼，並整合於固定不變的部分，這就是一種DSD。</p>\n<p>就如下圖一樣，一個系統裡面的Framework，除了手寫的Code外，不常變動的區塊外，還有一塊是由DSL寫出來的Model(左上角)所產生出來的，而產出的程式碼，就這樣嵌入於Framework裡面。</p>\n<p><a href=\"http://lh5.ggpht.com/-k_TXK0H1E-w/TjpICnm85KI/AAAAAAAAAWU/xII6VG4-AQo/s1600-h/image%25255B7%25255D.png\"><img src=\"http://lh4.ggpht.com/-kdMWSTjem38/TjpIDV5sv3I/AAAAAAAAAWY/VXvbZJkYnAs/image_thumb%25255B3%25255D.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>另外，我們通常設計一個程式時，最基本的，我們會分成三層，我們也可以利用DSL來定義這三層，並讓他自動產生相對應的程式碼，這樣未來我們製作其他專案的時候，就可以不需要再重複地打某些程式碼，如下圖，是Microsoft所做出來的一個例子，他們使用DSL來描述這三層式的架構。</p>\n<p><a href=\"http://lh4.ggpht.com/-njwqAQ8diCM/TjpID3pq3JI/AAAAAAAAAWc/mUwqCKwmTcw/s1600-h/image%25255B6%25255D.png\"><img src=\"http://lh4.ggpht.com/-AB_RO73xLKM/TjpIEV2Um-I/AAAAAAAAAWg/KVOc8SX75m0/image_thumb%25255B2%25255D.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>我們可以知道，如果跨越層級存取，是非常嚴重的一個錯誤，所以當UI直接存取Data時，就會產生錯誤，這些也可以從DSL裡面定義。</p>\n<p><a href=\"http://lh5.ggpht.com/-I0I55lUo5J8/TjpIEyi_vgI/AAAAAAAAAWk/6VAtyhIeu2U/s1600-h/image%25255B12%25255D.png\"><img src=\"http://lh6.ggpht.com/-oj8EsIRxfTM/TjpIF81QKoI/AAAAAAAAAWo/4J_3F6DdGjs/image_thumb%25255B6%25255D.png?imgmax=800\" alt=\"image\" title=\"image\"></a></p>\n<p>說了非常多的東西，看到最後，或許有人會覺得這和UML有啥不同?，就如前面所述，DSL是一種用於解決特定領域的語言，他的關鍵在於解決，這和描述用途的UML是非常不同的，雖然現在像是類別圖也可以用來產生程式碼，但是UML最初的用意，是用來描述整個系統架構，讓開發者了解，這和DSL是有很大的差異，DSL的初本，就是去解決特定重複性的問題。</p>\n<p>說了那麼多，未來我會帶一些範例，我想，大家就會更清楚的了解領悟。</p>\n<p>以下是一些參考網站，大家也可以過去看看喔。</p>\n<p><a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\" title=\"http://en.wikipedia.org/wiki/Domain-specific_language\">http://en.wikipedia.org/wiki/Domain-specific_language</a></p>\n<p><a href=\"http://msdn.microsoft.com/zh-tw/vstudio/cc963628\" title=\"http://msdn.microsoft.com/zh-tw/vstudio/cc963628\">http://msdn.microsoft.com/zh-tw/vstudio/cc963628</a></p>\n<p><a href=\"http://msdn.microsoft.com/en-us/vstudio/ff637756\" title=\"http://msdn.microsoft.com/en-us/vstudio/ff637756\">http://msdn.microsoft.com/en-us/vstudio/ff637756</a></p>\n<p><a href=\"http://msdn.microsoft.com/en-us/vstudio/ff637759\" title=\"http://msdn.microsoft.com/en-us/vstudio/ff637759\">http://msdn.microsoft.com/en-us/vstudio/ff637759</a></p>","excerpt":"最近又看到IThome的一篇文章，IBM個人電腦和MS-DOS邁入30年頭，才驚覺其實電腦真正開始發展也不過短短30年頭，而短短的3…"}},"pageContext":{"type":"posts","next":{"frontmatter":{"path":null,"title":"CodeBehind和CodeFile的歷史故事","tags":["ASP.NET","Visual Studio"]},"fields":{"slug":"/2011/07/28/CodeBehind和CodeFile的歷史故事/"},"fileAbsolutePath":"/home/runner/work/blog.sanc.idv.tw/blog.sanc.idv.tw/src/posts/blog.sanc.idv.tw/CodeBehind和CodeFile的歷史故事.md"},"previous":{"frontmatter":{"path":null,"title":"IIS使用Windows驗證時，無法登入，且會出現401.1 錯誤。","tags":["IIS"]},"fields":{"slug":"/2011/08/04/IIS使用Windows驗證時，無法登入，且會出現401-1-錯誤。/"},"fileAbsolutePath":"/home/runner/work/blog.sanc.idv.tw/blog.sanc.idv.tw/src/posts/blog.sanc.idv.tw/IIS使用Windows驗證時，無法登入，且會出現401-1-錯誤。.md"}}}}