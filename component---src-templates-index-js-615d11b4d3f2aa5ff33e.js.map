{"version":3,"sources":["webpack:///./src/templates/index.js"],"names":["Index","data","pageContext","nextPagePath","previousPagePath","posts","allMarkdownRemark","edges","map","node","console","log","id","autoExcerpt","excerpt","frontmatter","title","date","author","path","coverImage","tags","slug","fields","key","previousPath","previousLabel","nextPath","nextLabel","propTypes","PropTypes","object","isRequired","shape","string","postsQuery"],"mappings":"2FAAA,gJAQMA,EAAQ,SAAC,GAA+D,IAA7DC,EAA4D,EAA5DA,KAA4D,IAAtDC,YAAeC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,iBAEpBC,EAC1BJ,EADFK,kBAAqBC,MAGvB,OACE,oCACE,kBAAC,IAAD,MACA,kBAAC,IAAD,KACGF,EAAMG,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACZC,QAAQC,IAAIF,GADW,IAGrBG,EAcEH,EAdFG,GACSC,EAaPJ,EAbFK,QAJqB,EAiBnBL,EAZFM,YACEC,EANmB,EAMnBA,MACAC,EAPmB,EAOnBA,KAEAC,GATmB,EAQnBC,KARmB,EASnBD,QACAE,EAVmB,EAUnBA,WACAN,EAXmB,EAWnBA,QACAO,EAZmB,EAYnBA,KAGAC,EAEAb,EAHFc,OACED,KAIJ,OACE,kBAAC,IAAD,CACEE,IAAKZ,EACLI,MAAOA,EACPC,KAAMA,EACNE,KAAMG,EACNJ,OAAQA,EACRE,WAAYA,EACZC,KAAMA,EACNP,QAASA,GAAWD,OAK1B,kBAAC,IAAD,CACEY,aAAcrB,EACdsB,cAAc,cACdC,SAAUxB,EACVyB,UAAU,mBAOpB5B,EAAM6B,UAAY,CAChB5B,KAAM6B,IAAUC,OAAOC,WACvB9B,YAAa4B,IAAUG,MAAM,CAC3B9B,aAAc2B,IAAUI,OACxB9B,iBAAkB0B,IAAUI,UAIzB,IAAMC,EAAU,WAoCRnC","file":"component---src-templates-index-js-615d11b4d3f2aa5ff33e.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\nimport SEO from '../components/seo'\nimport Layout from '../components/layout'\nimport Post from '../components/post'\nimport Navigation from '../components/navigation'\n\nconst Index = ({ data, pageContext: { nextPagePath, previousPagePath } }) => {\n  const {\n    allMarkdownRemark: { edges: posts },\n  } = data\n\n  return (\n    <>\n      <SEO />\n      <Layout>\n        {posts.map(({ node }) => {\n          console.log(node);\n          const {\n            id,\n            excerpt: autoExcerpt,\n            frontmatter: {\n              title,\n              date,\n              path,\n              author,\n              coverImage,\n              excerpt,\n              tags,\n            },\n            fields:{\n              slug\n            }\n          } = node\n\n          return (\n            <Post\n              key={id}\n              title={title}\n              date={date}\n              path={slug}\n              author={author}\n              coverImage={coverImage}\n              tags={tags}\n              excerpt={excerpt || autoExcerpt}\n            />\n          )\n        })}\n\n        <Navigation\n          previousPath={previousPagePath}\n          previousLabel=\"Newer posts\"\n          nextPath={nextPagePath}\n          nextLabel=\"Older posts\"\n        />\n      </Layout>\n    </>\n  )\n}\n\nIndex.propTypes = {\n  data: PropTypes.object.isRequired,\n  pageContext: PropTypes.shape({\n    nextPagePath: PropTypes.string,\n    previousPagePath: PropTypes.string,\n  }),\n}\n\nexport const postsQuery = graphql`\n  query($limit: Int!, $skip: Int!) {\n    allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"//posts//\" } }\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          id\n          excerpt\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM YYYY\")\n            path\n            author\n            excerpt\n            tags\n            coverImage {\n              childImageSharp {\n                fluid(maxWidth: 800) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n          fields{\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default Index\n"],"sourceRoot":""}